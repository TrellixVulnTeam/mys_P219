class String:
    """A sequence of unicode characters. Immutable.

    """

    func __init__(self):
        """Create an empty string. Same as ``""``.

        """

    func __init__(self, character: char):
        """From a character.

        """

    func __init__(self, other: string):
        """From a string.

        """

    func __init__(self, other: bytes):
        """From a UTF-8 encoded string.

        """

    func __init__(self, other: bytes, start: i64, end: i64):
        """From a UTF-8 encoded string.

        """

    func to_utf8(self) -> bytes:
        """To UTF-8 bytes.

        """

    func __add__(self, other: string) -> string:
        """Add a string.

        """

    func __add__(self, other: char) -> string:
        """Add a character.

        """

    func __eq__(self, other: string) -> string:
        """

        """

    func __ne__(self, other: string) -> string:
        """

        """

    func __mul__(self, count: i64) -> string:
        """Repeat the string count times.

        """

    func __getitem__(self, index: i64) -> char:
        """Get character at given index.

        """

    func __getitem__(self, begin: i64, end: i64, step: i64) -> string:
        """Get a substring.

        """

    func __in__(self, value: char) -> bool:
        """Contains character.

        """

    func __in__(self, value: string) -> bool:
        """Contains string.

        """

    iterator __iter__(self) -> char:
        pass

    func starts_with(self, substring: string) -> bool:
        """Returns true if string starts with given substring.

        """

    func split(self, separator: string) -> [string]:
        """Split into list of strings with given separator string.

        """

    func split(self, separator: Regex) -> [string]:
        """

        """

    func join(self, parts: [string]) -> string:
        """Join given list of strings with the string itself.

        """

    func strip(self, chars: string) -> string:
        """Strip leading and trailing characters.

        """

    func strip_left(self, chars: string) -> string:
        """Strip leading characters.

        """

    func strip_right(self, chars: string) -> string:
        """Strip trailing characters.

        """

    func lower(self) -> string:
        """Make string lower case.

        """

    func upper(self) -> string:
        """Make string upper case.

        """

    func capitalize(self) -> string:
        """Capitalize string.

        """

    func casefold(self) -> string:
        """Stronger variant of lower that should be used when doing case
        insensitive comparison.

        """

    func find(self, sub: char, start: i64, end: i64) -> i64:
        """Find the first occurrence of given character within given
        limits. Returns -1 if not found.

        """

    func find(self, sub: string, start: i64, end: i64) -> i64:
        """Find the first occurrence of given substring within given
        limits. Returns -1 if not found.

        """

    func partition(self, separator: char) -> (string, char, string):
        """Find the first occurrence of given separator. If found, returns a
        tuple with characters before separator, the separator itself
        and the characters after the separator. If not found, returns
        the original string and the empty character as separator and
        the empty string as sencond part.

        """

    func partition(self, separator: string) -> (string, string, string):
        """Find the first occurrence of given separator. If found, returns a
        tuple with characters before separator, the separator itself
        and the characters after the separator. If not found, returns
        the original string and the empty string as separator and
        sencond part.

        """

    func replace(self, old: char, new: char) -> string:
        """Replace old with new.

        """

    func replace(self, old: string, new: string) -> string:
        """Replace old with new.

        """

    func replace(self, old: Regex, new: string) -> string:
        """Replace old with new.

        """

    func match(self, pattern: Regex) -> RegexMatch:
        """Match against given regular expression.

        """

class Bytes:
    """A sequence of bytes.

    """

    func __init__(self):
        """Create an empty bytes object. Same as ``b""``.

        """

    func __getitem__(self, index: i64) -> u8:
        """Get byte at given index.

        """

    func __getitem__(self, begin: i64, end: i64, step: i64) -> bytes:
        """Get subbytes.

        """

    iterator __iter__(self) -> u8:
        pass

    func to_hex(self) -> string:
        """To a hexadecimal string.

        """

    func length(self) -> i64:
        """Length.

        """

    func starts_with(self, value: bytes) -> bool:
        """Return true if starts with given value.

        """

    func ends_with(self, value: bytes) -> bool:
        """Return true if ends with given value.

        """

    func find(self, sub: bytes, start: i64 = 0, end: i64 = <length>) -> i64:
        """Find the first occurrence of given substring within given
        limits. Returns -1 if not found.

        """

    func resize(self, size: i64):
        """Resize to given size.

        """

    func reserve(self, size: i64):
        """Reserve memory for given size.

        """

    func append(self, value: u8):
        """Append value.

        """

    func append(self, value: iterator[u8]):
        """Append bytes.

        """

    func __add__(self, value: bytes) -> bytes:
        """Add bytes.

        """

    func __add__(self, value: u8) -> bytes:
        """Add a number (0 to 255).

        """

    func __eq__(self):
        pass

    func __in__(self, value: u8) -> bool:
        """Contains value.

        """

@generic(T)
class List:
    """A list with items of type T.

    ``[]`` is syntaxtic sugar for lists.

    """

    func __init__(self):
        pass

    func __init__(self, values: iterator[T]):
        pass

    func __init__(self, length: i64):
        pass

    func __get__(self, index: i64) -> T:
        pass

    func __get__(self, begin: i64, end: i64, step: i64) -> [T]:
        """Get a sublist.

        """

    func __set__(self, index: i64, value: T):
        pass

    iterator __iter__(self) -> T:
        pass

    func append(self, item: T):
        pass

    func append(self, items: iterator[T]):
        pass

    func insert(self, index: i64, value: T):
        pass

    func pop(self, index: i64 = -1) -> T:
        pass

    func remove(self, value: T):
        pass

    func count(self, value: T) -> i64:
        pass

    func clear(self):
        pass

    func find(self, value: T) -> i64:
        pass

    func sort(self):
        """Sort items in place.

        """

    func reverse(self):
        """Reverse items in place.

        """

@generic(TK, TV)
class Dict:
    """A dictionary with keys of type TK and values of type TV.

    ``{}`` is syntaxtic sugar for dicts.

    """

    func __init__(self):
        """Create an empty dictionary. Same as ``{}``.

        """

    func __getitem__(self, key: TK) -> TV:
        """Get value for key.

        """

    func __setitem__(self, key: TK, value: TV):
        pass

    iterator __iter__(self) -> (TK, TV):
        pass

    func get(self, key: TK, default: TV? = None, insert: bool = False) -> TV?:
        """Get value for key. Return default if missing.

        """

    func pop(self, key: TK, default: TV? = None) -> TV?:
        """Pop value for key. Return default if missing.

        """

    iterator keys(self) -> TK:
        pass

    iterator values(self) -> TV:
        pass
