from .mod3 import Fie
from .mod3 import Fam
from .mod2 import Ko

GLOB_IN_TRAIT_METHOD: i64 = 5

class Foo(Ko):
    a: i32

class Bar:

    def fie(self, g: Foo, h: Kam = Kam(Foo(1), None)) -> Fie:
        return Fie()

class Kam:
    x: Foo
    y: Fie

    def fff(self, g: Foo) -> Foo:
        return g

@enum
class Enum1:
    A

@trait
class Base:

    def foo(self) -> string:
        pass

    def bar(self) -> string:
        # Shared among all classes.
        # ToDo: See todo in tests/files/traits.mys for how to generate
        #       trait methods.
        # GLOB_IN_TRAIT_METHOD += 1
        return "base"

    def fie(self) -> char:
        return 'a'

VAR4: Fam = None

# Both the returned type and default value type must be automatically
# imported by the user module. However, the parameter type can not be
# used unless explicitly imported (just as Fam).
#
# The imported Fam type can be imported from this module as it is a
# parameter to this public function.
def func4(a: i32, fam: Fam, kam: Kam = Kam(None, None)) -> Foo:
    return Foo(a)

@trait
class Base2:
    pass

class Foo2(Base2):
    pass

def foo2(a: Base2):
    pass

@generic(T)
def genfunc() -> T:
    return 5

@generic(T)
class GenClass:
    a: T

@generic(T)
class GenClass2:
    b: T

@trait
class MatchBase:
    pass

class MatchFoo(MatchBase):
    x: i64

@trait
class Match2Base:
    pass

class Match2Foo(Match2Base):
    y: i64

def match_2(v: i64) -> Match2Base:
    return Match2Foo(2 * v)

class MemberClass:
    a: MemberClass2
    b: (i64, MemberClass3)
    c: [{i64: MemberClass4}]
    d: MemberClass5

    def __init__(self):
        self.a = MemberClass2("hi")
        self.b = (-1, MemberClass3("ho"))
        self.c = [{5: MemberClass4("ha")}]
        self.d = MemberClass5(MemberClass6("hu"))

class MemberClass2:
    b: string

class MemberClass3:
    x: string

class MemberClass4:
    y: string

class MemberClass5:
    a: MemberClass6

class MemberClass6:
    b: string
