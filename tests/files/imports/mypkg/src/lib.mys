from mypkg1.subpkg1.mod1 import func1
from mypkg1 import VAR3
from mypkg1.subpkg1.mod1 import Class1
from mypkg2 import func2
from mypkg2 import VAR1
from mypkg2 import VAR1 as VAR2
from mypkg2 import Class1 as MyPkgClass1
from .mod1 import func4 as my_func4
from .mod1 import Bar
from .mod3 import Fam
from .mod2 import Ko
from .mod1 import VAR4
from .mod1 import Enum1
from .mod1 import Base
from .mod1 import Base as BaseTrait
from .mod1 import Foo2
from .mod1 import foo2
from .mod1 import genfunc as genfunc2
from .mod1 import GenClass as MyGenClass
from .mod1 import GenClass2
from .mod1 import MatchBase
from .mod1 import MatchFoo

class Class2(Ko):
    x: Class1
    y: [MyPkgClass1]

def func8() -> i64:
    return 5

@test
def test_all():
    assert func1(1, 5) == 6

    class_1 = Class1(10)
    assert class_1.value == 10

    assert func2(99) == 99
    assert VAR1.value == 5
    assert VAR2.value == 5
    assert VAR3 == 1
    VAR3 += 1
    assert VAR3 == 2
    VAR3 = 0
    assert VAR3 == 0
    my_pkg_class_1 = MyPkgClass1(3)
    assert my_pkg_class_1.value == 3
    assert VAR4 is None
    VAR4 = Fam()
    assert VAR4 is not None

# This class has the same name (Foo) as the class returned by
# my_func4() to test that the correct Foo class is returned.
class Foo:
    apa: string

    def kalle(self, a: Foo) -> Foo:
        return a

    def bobo(self, a: bool):
        pass

@test
def test_no_import_needed_of_returned_class_nor_default_paramter_class():
    # Default value Kam() used for parameter kam. Returns
    # mypkg.mod1.Foo, that is, the same class name as Foo defined in
    # this module.
    assert my_func4(5, Fam()).a == 5
    assert Bar().fie(None).fum()

@test
def test_local_foo_not_returned_foo():
    v = Foo("hi")
    assert v.apa == "hi"

@test
def test_enum():
    v = Enum1.A
    assert v == Enum1(0)

class ImplementsTrait1(Base):

    def foo(self) -> string:
        return "1"

class ImplementsTrait2(BaseTrait):

    def foo(self) -> string:
        return "2"

    def bar(self) -> string:
        return "3"

def trait_foo(v: Base) -> string:
    return v.foo()

@test
def test_imported_trait():
    assert ImplementsTrait1().foo() == "1"
    assert ImplementsTrait2().foo() == "2"

    assert ImplementsTrait1().bar() == "base"
    assert ImplementsTrait2().bar() == "3"

    assert trait_foo(ImplementsTrait1()) == "1"
    assert trait_foo(ImplementsTrait2()) == "2"

@test
def test_no_import_needed_of_paramter_trait_type():
    # foo2() takes the trait Base2 as parameter. Foo2 implements
    # Base2. Base2 is not imported, but the below code should work
    # anyway.
    foo2(Foo2())

@test
def test_genfunc_as_genfunc2():
    assert genfunc2[i64]() == 5

@test
def test_genclass_as_mygenclass():
    assert MyGenClass[i64](5).a == 5

@test
def test_genclass2():
    assert GenClass2[i64](5).b == 5

class EnumMember:
    a: Enum1

    def foo(self, b: Enum1):
        self.a = b

class MatchBar(MatchBase):
    y: i64

def match_foo(base: MatchBase) -> i64:
    match base:
        case MatchFoo() as foo:
            return foo.x
        case MatchBar() as bar:
            return 2 * bar.y
        case _:
            return -1

@test
def test_match_imported_trait():
    assert match_foo(MatchFoo(5)) == 5
    assert match_foo(MatchBar(10)) == 20
