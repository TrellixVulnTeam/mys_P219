test fstring():
    v: string = f""
    assert v == ""
    v = f"foo"
    assert v == "foo"
    assert f"c{1+1}s" == "c2s"
    assert f"{2 * v}" == "foofoo"

test string_formatting():
    name = "Bob"
    assert f"Hi {name}!" == "Hi Bob!"

test char_formatting():
    name = ['B', 'o', 'b']
    assert f"Hi {name[0]}{name[1]}{name[2]}!" == "Hi Bob!"

test u8_i8_formatting():
    u8num: u8 = 50
    i8num: i8 = 51
    assert f"{u8num}, {i8num}" == "50, 51"

test string_formatting_with_number_first():
    assert f"{1}" == "1"
    assert f"{1}{2}" == "12"

test multiply():
    assert 2 * f"a {1 + 1}; " == "a 2; a 2; "

test i8_radix():
    v: i8 = 100

    assert f"{v:b}" == "1100100"
    assert f"{v:o}" == "144"
    assert f"{v:d}" == "100"
    assert f"{v:x}" == "64"

    v = -100

    assert f"{v:b}" == "-1100100"
    assert f"{v:o}" == "-144"
    assert f"{v:d}" == "-100"
    assert f"{v:x}" == "-64"

test i64_radix():
    v: i64 = 100

    assert f"{v:b}" == "1100100"
    assert f"{v:o}" == "144"
    assert f"{v:d}" == "100"
    assert f"{v:x}" == "64"

    v = -100

    assert f"{v:b}" == "-1100100"
    assert f"{v:o}" == "-144"
    assert f"{v:d}" == "-100"
    assert f"{v:x}" == "-64"

test u8_radix():
    v: u8 = 100

    assert f"{v:b}" == "1100100"
    assert f"{v:o}" == "144"
    assert f"{v:d}" == "100"
    assert f"{v:x}" == "64"

test u64_radix():
    v: u64 = 100

    assert f"{v:b}" == "1100100"
    assert f"{v:o}" == "144"
    assert f"{v:d}" == "100"
    assert f"{v:x}" == "64"

    v = 0x8ffffffffffffffe

    assert f"{v:b}" == "1000111111111111111111111111111111111111111111111111111111111110"
    assert f"{v:o}" == "1077777777777777777776"
    assert f"{v:d}" == "10376293541461622782"
    assert f"{v:x}" == "8ffffffffffffffe"
