from fiber import Fiber
from fiber import current
from fiber import sleep
from fiber import Queue
from fiber import Lock
from fiber import Event
from fiber import CancelledError

test sleep():
    sleep(0.2)

test current_is_not_none():
    assert current() is current()
    # assert current() is not None

test queue_of_integers():
    queue = Queue[i64]()

    queue.put(3)
    queue.put(2)
    queue.put(1)

    assert queue.get() == 3
    assert queue.get() == 2
    assert queue.get() == 1

test queue_length():
    queue = Queue[i64]()

    assert queue.length() == 0

    queue.put(3)
    queue.put(2)
    queue.put(1)
    assert queue.length() == 3

    assert queue.get() == 3
    assert queue.length() == 2

test queue_of_strings():
    queue = Queue[string]()

    queue.put("3")
    queue.put("2")
    queue.put("1")

    assert queue.get() == "3"
    assert queue.get() == "2"
    assert queue.get() == "1"

# ToDo
# class Foo:
#     value: i64
#
# test queue_of_classes():
#     queue = Queue[Foo]()
#
#     queue.put(Foo(5))
#
#     assert queue.get().value == 5

class Echo(Fiber):
    to_echo: Queue[i64]
    to_main: Queue[string]

    func run(self):
        self.to_main.put(str(self.to_echo.get() + 1))

test queue_two_fibers():
    to_echo = Queue[i64]()
    to_main = Queue[string]()
    fiber = Echo(to_echo, to_main)
    fiber.start()
    to_echo.put(9)
    assert to_main.get() == "10"

LOCK_COUNTER: i64 = 0

class Counter(Fiber):
    lock: Lock
    counter: i64

    func __init__(self, lock: Lock):
        self.lock = lock
        self.counter = 0

    func run(self):
        for _ in range(10):
            self.counter += 1
            self.lock.acquire()
            count = LOCK_COUNTER
            sleep(0.01)
            LOCK_COUNTER = count + 1
            self.lock.release()

test lock():
    lock = Lock()
    counters = [
        Counter(lock),
        Counter(lock),
        Counter(lock)
    ]

    for counter in counters:
        counter.start()

    for counter in counters:
        counter.join()

    assert LOCK_COUNTER == counters.length() * 10

    for i, counter in enumerate(counters):
        assert counter.counter == 10

class EventFiber(Fiber):
    event: Event

    func run(self):
        self.event.set()

test event():
    event = Event()
    fiber = EventFiber(event)
    fiber.start()
    event.wait()
    event.clear()
    fiber.join()

class OkFiber(Fiber):

    func run(self):
        pass

test join_ok():
    fiber = OkFiber()
    fiber.start()
    fiber.join()

class StartFiber(Fiber):

    func run(self):
        pass

test start():
    fiber = StartFiber()
    fiber.start()
    fiber.start()
    fiber.join()

class CancelFiber(Fiber):
    cancelled: bool

    func run(self):
        try:
            self.cancelled = False
            sleep(3600.0)
        except CancelledError:
            self.cancelled = True

test cancel():
    fiber = CancelFiber(False)
    fiber.start()
    sleep(0.1)
    fiber.cancel()
    fiber.join()
    assert fiber.cancelled

class CancelEventFiber(Fiber):
    event: Event
    cancelled: bool

    func run(self):
        try:
            self.event.wait()
        except CancelledError:
            self.cancelled = True

test cancel_event():
    event = Event()
    fiber = CancelEventFiber(event, False)
    fiber.start()
    sleep(0.1)
    fiber.cancel()
    fiber.join()
    event.set()
    event.wait()
    assert fiber.cancelled
