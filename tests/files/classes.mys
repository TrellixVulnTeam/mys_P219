class Init:
    a: [i64]
    b: string
    c: u64

    def __init__(self, a: [i64] = [5, 6]):
        self.a = a
        self.b = "hi"
        self.c = 99

@test
def test_init():
    foo = Init(None)

    assert foo.a is None
    assert foo.b == "hi"

    foo.c = 99

DEL_CALLED: bool = False

class Del:

    def __del__(self):
        DEL_CALLED = True

def del_func():
    Del()

@test
def test_del():
    assert not DEL_CALLED

    del_func()

    assert DEL_CALLED

class Str:
    x: string
    _y: u64

    def __str__(self) -> string:
        return "x: " + self.x + " " + str(self._y + 1)

@test
def test_str():
    foo = Str("hi")

    assert str(foo) == "x: hi 1"

class DefaultStr:
    a: string
    b: DefaultStr
    c: char
    d: [(i16, u32, bool)]
    e: {string: DefaultStr}
    f: f64
    _a: u64
    _b: string

@test
def test_default_str():
    foo = DefaultStr("hi",
                DefaultStr(None, None, 'k', [(-5, 50, True)], None, -1.0),
                'A',
                None,
                {
                    "y": DefaultStr(None, None, 'b', None, None, 0.0)
                },
                10.0)

    assert str(foo) == (
        "DefaultStr(a=\"hi\", b=DefaultStr(a=None, b=None, c='k', d=[(-5, 50, "
        "True)], e=None, f=-1.000000, _a=0, _b=None), c='A', d=None, e={\"y\": "
        "DefaultStr(a=None, b=None, c='b', d=None, e=None, f=0.000000, _a=0, "
        "_b=None)}, f=10.000000, _a=0, _b=None)")

class NegativeFloat:
    a: f32
    b: f64

@test
def test_negative_f32():
    nf = NegativeFloat(-1.0, -2.0)
    assert nf.a == -1.0
    assert nf.b == -2.0

    nf = NegativeFloat(1.0 / -1.0, -2.0 / -4.0)
    assert nf.a == -1.0
    assert nf.b == 0.5

class OverloadedMethods:

    def foo(self) -> i64:
        return 5

    def foo(self, a: i64) -> i64:
        return a

@test
def test_overloaded_methods():
    v = OverloadedMethods()
    assert v.foo() == 5
    assert v.foo(1) == 1

class OverloadedMethodsDefaults:

    def foo(self, a: string) -> string:
        return a

    def foo(self, a: i64 = 5) -> i64:
        return a

@test
def test_overloaded_methods_defaults():
    v = OverloadedMethodsDefaults()
    assert v.foo() == 5
    assert v.foo(1) == 1
    assert v.foo("a") == "a"
