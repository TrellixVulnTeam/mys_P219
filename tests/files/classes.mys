class Init:
    a: [i64]?
    b: string
    c: u64

    func __init__(self, a: [i64]? = [5, 6]):
        self.a = a
        self.b = "hi"
        self.c = 99

test init():
    foo = Init(None)

    assert foo.a is None
    assert foo.b == "hi"

    foo.c = 99

DEL_CALLED: bool = False

class Del:

    func __del__(self):
        DEL_CALLED = True

func del_func():
    Del()

test del():
    assert not DEL_CALLED

    del_func()

    assert DEL_CALLED

class Str:
    x: string
    _y: u64

    func __str__(self) -> string:
        return "x: " + self.x + " " + str(self._y + 1)

test str():
    foo = Str("hi")

    assert str(foo) == "x: hi 1"

class DefaultStr:
    a: string?
    b: DefaultStr?
    c: char
    d: [(i16, u32, bool)]?
    e: {string: DefaultStr}
    f: f64
    _a: u64
    _b: string?

test default_str():
    foo = DefaultStr("hi",
                     DefaultStr(None, None, 'k', [(-5, 50, True)], {}, -1.0),
                     'A',
                     None,
                     {
                         "y": DefaultStr(None, None, 'b', None, {}, 0.0)
                     },
                     10.0)

    assert str(foo) == (
        "DefaultStr(a=\"hi\", b=DefaultStr(a=None, b=None, c='k', d=[(-5, 50, "
        "True)], e={}, f=-1.000000, _a=0, _b=None), c='A', d=None, e={\"y\": "
        "DefaultStr(a=None, b=None, c='b', d=None, e={}, f=0.000000, _a=0, "
        "_b=None)}, f=10.000000, _a=0, _b=None)")

class NegativeFloat:
    a: f32
    b: f64

test negative_f32():
    nf = NegativeFloat(-1.0, -2.0)
    assert nf.a == -1.0
    assert nf.b == -2.0

    nf = NegativeFloat(1.0 / -1.0, -2.0 / -4.0)
    assert nf.a == -1.0
    assert nf.b == 0.5

class OverloadedMethods:

    func foo(self) -> i64:
        return 5

    func foo(self, a: i64) -> i64:
        return a

test overloaded_methods():
    v = OverloadedMethods()
    assert v.foo() == 5
    assert v.foo(1) == 1

class OverloadedMethodsDefaults:

    func foo(self, a: string) -> string:
        return a

    func foo(self, a: i64 = 5) -> i64:
        return a

test overloaded_methods_defaults():
    v = OverloadedMethodsDefaults()
    assert v.foo() == 5
    assert v.foo(1) == 1
    assert v.foo("a") == "a"

class Operators:
    v: i64

    func __add__(self, other: Operators) -> Operators:
        return Operators(self.v + other.v)

    func __sub__(self, other: Operators) -> Operators:
        return Operators(self.v - other.v)

    func __mul__(self, other: Operators) -> Operators:
        return Operators(self.v * other.v)

    func __div__(self, other: Operators) -> Operators:
        return Operators(self.v / other.v)

test operators():
    a = Operators(7)
    b = Operators(3)

    c = a + b
    assert c.v == 10

    c = a - b
    assert c.v == 4

    c = a * b
    assert c.v == 21

    c = a / b
    assert c.v == 2

    c = a / b + b
    assert c.v == 5

    c = a + b * b
    assert c.v == 16

    c = (a + b) * b
    assert c.v == 30

class ScalarOperators:
    v: i64

    func __add__(self, other: i64) -> ScalarOperators:
        return ScalarOperators(self.v + other)

    func __sub__(self, other: i64) -> ScalarOperators:
        return ScalarOperators(self.v - other)

    func __mul__(self, other: i64) -> ScalarOperators:
        return ScalarOperators(self.v * other)

    func __div__(self, other: i64) -> ScalarOperators:
        return ScalarOperators(self.v / other)

test scalar_operators():
    a = ScalarOperators(7)

    b = a + 2
    assert b.v == 9

    b = a - 2
    assert b.v == 5

    b = a * 2
    assert b.v == 14

    b = a / 2
    assert b.v == 3

class ScalarOperatorsResult:
    v: i64

    func __add__(self, other: i64) -> i64:
        return self.v + other

    func __sub__(self, other: i64) -> i64:
        return self.v - other

    func __mul__(self, other: i64) -> i64:
        return self.v * other

    func __div__(self, other: i64) -> i64:
        return self.v / other

test scalar_operators_result():
    a = ScalarOperatorsResult(7)

    b = a + 2
    assert b == 9

    b = a - 2
    assert b == 5

    b = a * 2
    assert b == 14

    b = a / 2
    assert b == 3

class OperatorOverloadingTwice:
    v: i64

    func __add__(self, other: OperatorOverloadingTwice) -> i64:
        return self.v + other.v

    func __add__(self, other: i64) -> i64:
        return self.v + other

test operator_overloading_twice():
    a = OperatorOverloadingTwice(5)

    b = a + OperatorOverloadingTwice(2)
    assert b == 7

    b = a + 3
    assert b == 8

class Foo1:
    v: i64

    func __add__(self, other: Foo1) -> Foo1:
        return Foo1(self.v + other.v)

    func __add__(self, other: i64) -> Foo1:
        return Foo1(self.v + other)

test late_number():
    foo = Foo1(5)
    foo = foo + foo + foo + Foo1(100) + 1000
    assert foo.v == 1115

class AugOperators:
    value: i64

    func __iadd__(self, data: string):
        self.value += i64(data)

    func __iadd__(self, data: char):
        self += str(data)

    func __isub__(self, data: i64):
        self.value -= data

    func __imul__(self, data: i64):
        self.value *= data

    func __idiv__(self, data: i64):
        self.value /= data

test append():
    v = AugOperators(0)
    assert v.value == 0

    v += "1"
    assert v.value == 1

    v += '2'
    assert v.value == 3

    v -= 1
    assert v.value == 2

    v *= 4
    assert v.value == 8

    v /= 2
    assert v.value == 4

class Value:
    v: i64

    func __lt__(self, other: Value) -> bool:
        return self.v < other.v

    func __eq__(self, other: Value) -> bool:
        return self.v == other.v

    func __le__(self, other: Value) -> bool:
        return self < other or self == other

    func __gt__(self, other: Value) -> bool:
        return not (self <= other)

    func __ne__(self, other: Value) -> bool:
        return not (self == other)

    func __ge__(self, other: Value) -> bool:
        return not (self < other)

test compare():
    assert Value(1) == Value(1)
    res = Value(1) == Value(1)
    assert res
    assert not (Value(1) == Value(2))
    res = Value(1) == Value(2)
    assert not res

    assert Value(1) != Value(2)
    res = Value(1) != Value(2)
    assert res
    assert not (Value(1) != Value(1))
    res = Value(1) != Value(1)
    assert not res

    assert Value(1) < Value(2)
    res = Value(1) < Value(2)
    assert res
    assert not (Value(1) < Value(1))
    res = Value(1) < Value(1)
    assert not res

    assert Value(2) > Value(1)
    res = Value(2) > Value(1)
    assert res
    assert not (Value(1) > Value(1))
    res = Value(1) > Value(1)
    assert not res

    assert Value(1) <= Value(1)
    res = Value(1) <= Value(1)
    assert res
    assert Value(1) <= Value(2)
    res = Value(1) <= Value(2)
    assert res
    assert not (Value(1) <= Value(0))
    res = Value(1) <= Value(0)
    assert not res

    assert Value(1) >= Value(1)
    res = Value(1) >= Value(1)
    assert res
    assert Value(2) >= Value(1)
    res = Value(2) >= Value(1)
    assert res
    assert not (Value(0) >= Value(1))
    res = Value(0) >= Value(1)
    assert not res
