@test
func test_assert():
    value = False

    assert True
    assert 1 == i16(1)
    assert "\"a\"" == str("a")
    assert 1 == 1
    assert 1.0 == 1.0

    try:
        assert False
    except AssertionError:
        value = True

    assert value

@test
func test_assert_in():
    value = False
    values: [i32] = [1, 2, 4]
    assert 1 in values
    assert 2 in values
    assert 4 in values
    assert 1.0 in [1.0]
    assert "" in [""]

    try:
        assert 3 in values
    except AssertionError:
        value = True

    assert value

@test
func test_assert_not_in():
    value = False
    values: [i32] = [1, 2, 4]
    assert 0 not in values
    assert 3 not in values
    assert 5 not in values

    try:
        assert 1 not in values
    except AssertionError:
        value = True

    assert value

@test
func test_message_eq():
    res: AssertionError = None

    try:
        assert 1 == 2
    except AssertionError as error:
        res = error

    assert str(res) == "AssertionError(message=\"1 == 2 is not true\")"

@test
func test_message_is():
    res: AssertionError = None
    a = "foo"

    try:
        assert a is None
    except AssertionError as error:
        res = error

    assert str(res) == "AssertionError(message=\"\"foo\" is None is not true\")"

@test
func test_message_is_not():
    res: AssertionError = None
    a = "foo"

    try:
        assert a is not a
    except AssertionError as error:
        res = error

    assert str(res) == (
        "AssertionError(message=\"\"foo\" is not \"foo\" is not true\")")

@test
func test_message_in():
    res: AssertionError = None

    try:
        assert 1 in [2, 5]
    except AssertionError as error:
        res = error

    assert str(res) == "AssertionError(message=\"1 in [2, 5] is not true\")"

@test
func test_message_not_in():
    res: AssertionError = None

    try:
        assert 1 not in [1, 5]
    except AssertionError as error:
        res = error

    assert str(res) == "AssertionError(message=\"1 not in [1, 5] is not true\")"
