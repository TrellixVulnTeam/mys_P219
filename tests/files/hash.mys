test integers():
    assert hash(i8(1)) == 1
    assert hash(i16(1)) == 1
    assert hash(i32(1)) == 1
    assert hash(i64(1)) == 1
    assert hash(u8(1)) == 1
    assert hash(u16(1)) == 1
    assert hash(u32(1)) == 1
    assert hash(u64(1)) == 1

test string():
    assert hash("Hohohaha") == 198448884

test char():
    assert hash('a') == 97

test bytes():
    assert hash(b"Hohohaha") == 8052741524007

test float():
    assert hash(2.0) != hash(0.0)

test bool():
    assert hash(True) == 1
    assert hash(False) == 0

class AutoHash:
    x: i64

class CustomHash:
    x: i64
    y: AutoHash

    func __hash__(self) -> i64:
        return hash(self.x) + 2 * hash(self.y)

    func __eq__(self, other: CustomHash) -> bool:
        if other is None:
            return False

        return self.x == other.x and self.y == other.y

test custom_hash():
    auto_hash_5 = hash(AutoHash(5))
    auto_hash_10 = hash(AutoHash(10))
    assert hash(CustomHash(1, AutoHash(5))) == 1 + 2 * auto_hash_5
    assert hash(CustomHash(3, AutoHash(10))) == 3 + 2 * auto_hash_10

test custom_hash_in_dict():
    a = CustomHash(1, AutoHash(5))
    b = CustomHash(1, AutoHash(5))
    c = CustomHash(5, AutoHash(10))
    d = CustomHash(7, AutoHash(10))
    v = {a: True, c: False}
    assert len(v) == 2
    assert a in v
    assert b in v
    assert v[a] == True
    assert c in v
    assert d not in v

test custom_hash_in_set():
    a = CustomHash(1, AutoHash(5))
    b = CustomHash(1, AutoHash(5))
    c = CustomHash(5, AutoHash(10))
    d = CustomHash(5, AutoHash(15))
    v = {a, c}
    assert len(v) == 2
    assert a in v
    assert b in v
    assert c in v
    assert d not in v

test tuple_in_set():
    a = (1, AutoHash(5), "", 2.0, (1, ))
    b = (1, AutoHash(5), "", 2.0, (1, ))
    c = (1, AutoHash(5), "", 2.0, (2, ))
    d = (5, AutoHash(15), "", 2.0, (1, ))
    v = {a, c}
    assert len(v) == 2
    assert a in v
    assert b in v
    assert c in v
    assert d not in v
