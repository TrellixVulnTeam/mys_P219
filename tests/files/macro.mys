_FOO: i64 = 0

macro FOO():
    _FOO += 1

test foo():
    FOO()
    assert _FOO == 1

class Foo:
    _x: i64

    func __init__(self):
        self._x = 0

    macro INCREMENT(self):
        self._x += 1
        self.increment()

    func x(self) -> i64:
        return self._x

    func increment(self):
        self._x += 1

test method():
    foo = Foo()
    foo.INCREMENT()
    assert foo.x() == 2

macro LOG(enabled: bool, message: string):
    if enabled:
        print(message)

_VALUE: i64 = 0

func value() -> i64:
    _VALUE += 1

    return _VALUE

test log():
    assert _VALUE == 0
    LOG(False, f"value: {value()}")
    assert _VALUE == 0
    LOG(True, f"value: {value()}")
    assert _VALUE == 1

class Bar:
    enabled: bool

    macro LOG(self, message: string):
        if self.enabled:
            print(message)

test log_method():
    _VALUE = 0
    bar = Bar(False)
    bar.LOG(f"value: {value()}")
    bar.enabled = True
    assert _VALUE == 0
    bar.LOG(f"value: {value()}")
    assert _VALUE == 1

class Foo2:
    _x: i64

    func __init__(self):
        self._x = 0

    macro INCREMENT(self):
        self._x += 1

    func x(self) -> i64:
        return self._x

    macro INCREMENT_2(self):
        self._x += 1
        self.INCREMENT()

test call_macro_method_in_macro_method():
    foo = Foo2()
    foo.INCREMENT_2()
    assert foo.x() == 2

_FOO_2: i64 = 0

macro FOO_2():
    _FOO_2 += 1
    FOO_3()

macro FOO_3():
    _FOO_2 += 1

test call_macro_function_in_macro_function():
    FOO_2()
    assert _FOO_2 == 2
