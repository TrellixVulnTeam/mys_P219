test match_integer_1():
    value = 0
    res = 0

    match value:
        case 0:
            res = 1
        case _:
            res = 2

    assert res == 1

test match_integer_2():
    value = 1

    match value:
        case 1:
            value = 3

    assert value == 3

test match_string():
    value = "hi"
    res = 0

    match value:
        case "123":
            res = 5
        case "hi":
            res = 6
        case _:
            res = 7

    assert res == 6

test match_bytes():
    value = b"hi"
    res = 0

    match value:
        case b"123":
            res = 5
        case b"hi":
            res = 6
        case _:
            res = 7

    assert res == 6

ONLY_ONCE_VALUE: i32 = 0

func only_once(value: i32) -> i32:
    ONLY_ONCE_VALUE += 1

    return value

test match_function_once():
    value = 0
    ONLY_ONCE_VALUE = 0

    match only_once(1):
        case 0:
            value = 1
        case 1:
            value = 2

    assert value == 2
    assert ONLY_ONCE_VALUE == 1

trait MatchBase:
    pass

class MatchFoo(MatchBase):
    pass

class MatchBar(MatchBase):
    pass

class MatchFie(MatchBase):
    pass

class MatchFum(MatchBase):
    pass

func foo_trait(base: MatchBase?) -> i64:
    result = 0

    match base:
        case MatchFoo():
            result = 1
        case MatchBar() as value:
            result = 2
        case MatchFie() as value:
            result = 3
        case _:
            result = 4

    return result

test match_trait():
    assert foo_trait(MatchFoo()) == 1
    assert foo_trait(MatchBar()) == 2
    assert foo_trait(MatchFie()) == 3
    assert foo_trait(MatchFum()) == 4
    assert foo_trait(None) == 4

func foo_trait_variable_in_all_branches(base: MatchBase) -> i64:
    match base:
        case MatchFoo():
            result = 1
        case MatchBar() as value:
            result = 2
        case MatchFie() as value:
            result = 3
        case _:
            result = 4

    return result

test match_trait_variable_in_all_branches():
    assert foo_trait_variable_in_all_branches(MatchFoo()) == 1
    assert foo_trait_variable_in_all_branches(MatchBar()) == 2
    assert foo_trait_variable_in_all_branches(MatchFie()) == 3
    assert foo_trait_variable_in_all_branches(MatchFum()) == 4

test char_match_1():
    res = 0
    value = 'a'

    match value:
        case 'a':
            res = 1
        case 'b':
            res = 2

    assert res == 1

test char_match_2():
    v = ['a']
    res = 0

    match v[0]:
        case 'a':
            res = 1
        case 'b':
            res = 2

    assert res == 1

test u64_literal_match():
    res = 0

    # Should this be allowed?
    match 5:
        case 5:
            res = 1
        case 7:
            res = 2

    assert res == 1

trait MemberBase:
    pass

class MemberFoo(MemberBase):
    value_i64: i64
    value_char: char
    value_string: string

    func __init__(self,
                 value_i64: i64 = -1,
                 value_char: char = '',
                 value_string: string? = None):
        self.value_i64 = value_i64
        self.value_char = value_char
        self.value_string = value_string

func class_member_1(base: MemberBase):
    ok = False

    match base:
        case MemberFoo(value_i64=1):
            ok = True

    assert ok

test class_member_1():
    class_member_1(MemberFoo(1))

func class_member_2(base: MemberBase):
    ok = False

    match base:
        case MemberFoo(value_i64=1):
            pass
        case MemberFoo(value_i64=2):
            ok = True

    assert ok

test class_member_2():
    class_member_2(MemberFoo(2))

func class_member_3(base: MemberBase):
    ok = False

    match base:
        case MemberFoo(value_i64=1):
            pass
        case MemberFoo(value_i64=2):
            pass
        case _:
            ok = True

    assert ok

test class_member_3():
    class_member_3(MemberFoo(3))

func class_member_mixed(base: MemberBase) -> string:
    match base:
        case MemberFoo(value_i64=2) as foo:
            return f"i64={foo.value_i64}"
        case MemberFoo(value_char='a', value_string="hi") as foo:
            return f"char='{foo.value_char}', string=\"{foo.value_string}\""
        case _:
            return "_"

test class_member_mixed():
    assert class_member_mixed(MemberFoo(2, 'a', "hi")) == "i64=2"
    assert class_member_mixed(MemberFoo(3, 'a', "hi")) == "char='a', string=\"hi\""
    assert class_member_mixed(MemberFoo(3, 'b', "hi")) == "_"

func class_as_member(base: MemberBase) -> i64:
    match base:
        case MemberFoo(value_i64=0) as foo:
            return 2 * foo.value_i64
        case MemberFoo(value_i64=1) as foo:
            return foo.value_i64

    return -1

test class_as_member():
    assert class_as_member(MemberFoo(1)) == 1

trait TupleMemberBase:
    pass

class TupleMemberFoo(TupleMemberBase):
    value: (i64, string)

func class_tuple_member(base: TupleMemberBase) -> (i64, string)?:
    match base:
        case TupleMemberFoo(value=(1, "5")) as foo:
            return foo.value
        case TupleMemberFoo(value=(1, "6")):
            return (0, "66")

    return None

test class_tuple_member():
    assert class_tuple_member(TupleMemberFoo((1, "5"))) == (1, "5")
    assert class_tuple_member(TupleMemberFoo((2, "5"))) is None
    assert class_tuple_member(TupleMemberFoo((1, "6"))) == (0, "66")

test define_variable_in_all_cases():
    match 1:
        case 1:
            ok = True
        case 2:
            ok = False
        case _:
            ok = False

    assert ok

test integer_as_non_default():
    v = 0

    match 1:
        case 1 as a:
            v = a
        case _:
            pass

    assert v == 1

test string_as_default():
    v = ""

    match "a":
        case "b":
            pass
        case _ as a:
            v = a

    assert v == "a"

test match_optional():
    x: i64? = None

    match x:
        case None:
            pass
        case 1:
            assert False
        case _:
            assert False

    x = 1

    match x:
        case None:
            assert False
        case 1:
            pass
        case _:
            assert False
