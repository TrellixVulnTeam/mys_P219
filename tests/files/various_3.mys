class ReturnFoo:
    v: i32

    func bar(self) -> ReturnFoo:
        return ReturnFoo(2 * self.v)

@test
func test_return_foo():
    foo = ReturnFoo(1).bar().bar().bar()

    assert foo.v == 8

@test
func test_value_if_cond_else_value():
    assert (1 if True else 2) == 1

    a = 1
    b = 2
    c = 3

    assert (a if 1 == b else c) == c

func deduce_foo() -> (u16, [i64]):
    return (1, [3, 4])

@test
func test_deduce_compare_types():
    assert u8(1) == 1
    assert -5 != 1
    assert [i8(-1)] == [-1]
    assert (u8(1), 5) == (1, i8(5))
    assert deduce_foo() == (1, [3, 4])
    assert (1.0, [3, 4]) != (1.0, [3, -4, 4, 1])
    assert (1.0, [3, 4]) != (1.0, [3, i8(-4)])
    assert ([(1, True), (i8(5), False)]) == ([(1, True), (5, False)])
    assert [[(1, True)]] != [[(1, True)], [], []]
    assert ([], 5) == ([], 5)
    assert [] == []
    v: [i16] = []
    assert v == []
    assert [[]] == [[]]
    assert [[], []] != [[], [(True, False)]]

@test
func test_unary():
    assert -1 == -1
    assert -1.0 == -1.0
    assert +1 == +1
    assert +1.0 == +1.0

@test
func test_define_variable_in_if_and_else_branches_1():
    y = 0

    if False:
        x = 1
        y = 2
    else:
        x = 3
        y = 4

    assert x == 3
    assert y == 4

@test
func test_define_variable_in_if_and_else_branches_2():
    if False:
        x = 1
    elif False:
        x = 2
    else:
        if True:
            x = 3
        else:
            x = 4

    assert x == 3

@test
func test_define_variable_in_all_branches_with_raise_1():
    if False:
        value = -1
    elif True:
        value = -2
    else:
        raise UnreachableError()

    assert value == -2

@test
func test_define_variable_in_all_branches_with_raise_2():
    if False:
        raise UnreachableError()
    else:
        value = -2

    assert value == -2

@test
func test_define_variable_in_all_branches_with_raise_3():
    if False:
        raise UnreachableError()
    else:
        if True:
            value = -2
        else:
            raise UnreachableError()

    assert value == -2

@test
func test_define_variable_in_all_branches_with_nested_raise():
    if False:
        value = -1
    elif True:
        value = -2
    else:
        if True:
            raise UnreachableError()
        else:
            raise UnreachableError()

    assert value == -2

@test
func test_define_list_variable_in_if_and_else_branches():
    if True:
        x = [1, 3, 5]
    else:
        x = [2]

    assert x == [1, 3, 5]

func named_parameters(a: bool, b: string, c: string) -> string:
    return f"{a} {b} {c}"

@test
func test_named_function_parameters():
    assert named_parameters(True, "1", "2") == "True 1 2"
    assert named_parameters(a=True, b="1", c="2") == "True 1 2"
    assert named_parameters(True, c="1", b="2") == "True 2 1"
    assert named_parameters(True, "1", c="2") == "True 1 2"

@trait
class NamedBase:

    func named_parameters_base(self, a: bool, b: string, c: NamedFoo) -> string:
        return f"{a} {b} {c}"

class NamedFoo(NamedBase):

    func named_parameters(self, a: bool, b: string, c: string) -> string:
        return f"{a} {b} {c}"

func named_parameters_base(base: NamedBase):
    foo = NamedFoo()

    assert base.named_parameters_base(True, "1", foo) == "True 1 NamedFoo()"
    assert base.named_parameters_base(a=True, b="1", c=foo) == "True 1 NamedFoo()"
    assert base.named_parameters_base(True, c=foo, b="2") == "True 2 NamedFoo()"
    assert base.named_parameters_base(True, "1", c=foo) == "True 1 NamedFoo()"
    assert base.named_parameters_base(True, "1", c=None) == "True 1 None"

@test
func test_named_method_parameters():
    foo = NamedFoo()

    assert foo.named_parameters(True, "1", "2") == "True 1 2"
    assert foo.named_parameters(a=True, b="1", c="2") == "True 1 2"
    assert foo.named_parameters(True, c="1", b="2") == "True 2 1"
    assert foo.named_parameters(True, "1", c="2") == "True 1 2"

    named_parameters_base(foo)

class NamedDefaultFoo:
    a: i32
    b: i32
    c: string

    func __init__(self, a: i32, b: i32 = -1, c: string = None):
        self.a = a
        self.b = b
        self.c = c

@test
func test_constructor_with_named_and_default_parameters():
    foo = NamedDefaultFoo(1)
    assert foo.a == 1
    assert foo.b == -1
    assert foo.c is None

    foo = NamedDefaultFoo(1, b=-1)
    assert foo.a == 1
    assert foo.b == -1
    assert foo.c is None

    foo = NamedDefaultFoo(1, b=5, c="hi")
    assert foo.a == 1
    assert foo.b == 5
    assert foo.c  == "hi"

    foo = NamedDefaultFoo(1, c="hi", b=2)
    assert foo.a == 1
    assert foo.b == 2
    assert foo.c == "hi"

func return_tuple_items_as_none() -> (string, bytes, [bool], {bool: i32}):
    return (None, None, None, None)

@test
func test_return_tuple_items_as_none():
    assert return_tuple_items_as_none() is not (None, None, None, None)
    assert return_tuple_items_as_none() == (None, None, None, None)

func cpp_reserved(long: i32) -> i32:
    return long

class CppReserved:
    true: i32

    func delete(self):
        pass

@test
func test_cpp_reserved():
    short = 1
    assert short == 1

    default: i8 = 2
    assert default == 2

    if default == 1 or short == 2:
        pass

    for int in range(1):
        pass

    assert cpp_reserved(1) == 1
    assert CppReserved(1).true == 1
    CppReserved(1).delete()

    if True:
        double = 1
    else:
        double = 2

    assert 1 == double

class ReturnSelf:

    func get_self(self) -> ReturnSelf:
        return self

    func get_same(self, this: ReturnSelf) -> ReturnSelf:
        return this

@test
func test_return_self():
    x = ReturnSelf()

    assert x is x.get_self()
    assert x is x.get_same(x)
    assert x is x.get_self().get_same(x)
