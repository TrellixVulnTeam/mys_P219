class FooGlob:

    value: i32

func glob_foo(v: i32) -> i32:
    return 2 * v

func glob_bar(v: FooGlob) -> i32:
    return 3 * v.value

GLOB_1: i32 = 1
"GLOB_1 docstring!"
GLOB_2: string = ""
GLOB_3: FooGlob = FooGlob(5)
GLOB_4: i32 = glob_foo(1)
GLOB_5: i32 = glob_foo(glob_foo(-1))
GLOB_6: i32 = glob_foo(glob_bar(FooGlob(5)))
GLOB_7: i32 = GLOB_1
GLOB_8: [i64] = [1, 3]

test global_variable():
    assert GLOB_1 == 1
    assert GLOB_2 == ""
    assert GLOB_3.value == 5
    assert GLOB_4 == 2
    assert GLOB_5 == -4
    assert GLOB_6 == 30
    assert GLOB_7 == 1
    assert GLOB_8[0] == 1
    assert GLOB_8[1] == 3

test assign_none_to_variable():
    v1: [i64]? = [1, 2]
    v2: (i64, i64)? = (1, 2)
    v3: {i64: i64}? = {1: 2}

    assert v1 is not None
    assert v2 is not None
    assert v3 is not None

    v1 = None
    v2 = None
    v3 = None

    assert v1 is None
    assert v2 is None
    assert v3 is None

test variable_declaration():
    values: [[i32]] = [[], []]
    assert values == [[], []]

test inferred_type_from_comparision():
    v = (1 == 2)
    assert not v

test inferred_type_i64():
    v = 1
    v += 0xffffffff
    assert v == 4294967296

GLOB_WITH_C: i64 = c"1"

test glob_with_c():
    assert GLOB_WITH_C == 1

func return_in_branch_variable_in_other() -> i64:
    if False:
        return -1
    else:
        a = 1

    return a

test return_in_branch_variable_in_other():
    assert return_in_branch_variable_in_other() == 1

test variable_called_del():
    del = 5
    assert del == 5

UNTYPED_INTEGER = 1
UNTYPED_REGEX = re"foo"
UNTYPED_INTEGER_BINOP = 4 + 5
UNTYPED_STRING = "hello"
UNTYPED_DICT = {1: ""}
UNTYPED_TUPLE = (1, True, [5, 6])
UNTYPED_SET = {1, 2, 3}

test untyped():
    assert UNTYPED_INTEGER == 1
    assert UNTYPED_REGEX.match("foo") is not None
    assert UNTYPED_INTEGER_BINOP == 9
    assert UNTYPED_STRING == "hello"
    assert UNTYPED_DICT == {1: ""}
    assert UNTYPED_TUPLE != (1, True, [5, 7])
    assert UNTYPED_SET == {1, 2, 3}
