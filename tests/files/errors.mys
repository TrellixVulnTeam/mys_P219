@test
func test_try_except_else():
    res = 0

    try:
        value = True
        x = 1
    except ValueError:
        res = 1
    else:
        assert value
        assert x == 1
        res = 2

    assert res == 2

@test
func test_try_except_else_finally():
    res = 0

    try:
        value = False
    except ValueError:
        res = 1
    else:
        assert not value
        res = 2
    finally:
        res = 3

    assert res == 3

class EmptyError(Error):
    pass

@test
func test_empty_error():
    try:
        res = 0
        raise EmptyError()
    except EmptyError:
        res = 1

    assert res == 1

@test
func test_except_error_empty_error():
    try:
        raise EmptyError()
    except Error as error:
        res = str(error)

    assert res == "EmptyError()"

class MemberError(Error):
    x: i64

@test
func test_member_error_as_1():
    try:
        raise MemberError(9)
    except MemberError as error:
        res = error.x

    assert res == 9

@test
func test_member_error_as_2():
    try:
        raise MemberError(-2)
    except MemberError as error:
        assert error.x == -2

@test
func test_member_error_as_3():
    res = 0

    try:
        raise MemberError(5)
    except Error as error:
        match error:
            case MemberError() as member_error:
                res = member_error.x

    assert res == 5

@test
func test_member_error_re_raise_1():
    try:
        raise MemberError(5)
    except MemberError as error:
        try:
            raise error
        except MemberError as k:
            res = k.x

    assert res == 5

@test
func test_member_error_re_raise_2():
    try:
        raise MemberError(5)
    except MemberError as error:
        try:
            raise
        except MemberError as k:
            res = k.x

    assert res == 5

@test
func test_member_error_re_raise_error():
    try:
        raise MemberError(3)
    except Error as error:
        try:
            raise error
        except MemberError as k:
            res = k.x

    assert res == 3

@test
func test_member_error_str():
    try:
        raise MemberError(10)
    except MemberError as error:
        res = str(error)

    assert res == "MemberError(x=10)"

@test
func test_1():
    res = 0

    try:
        raise NotImplementedError("foo")
    except ValueError:
        res = 1
    except NotImplementedError:
        res = 2
    finally:
        assert res == 2
        res = 3

    assert res == 3

@test
func test_2():
    res = 0
    a = 5

    try:
        try:
            for i in range(5):
                print("i, a, i * a:", i, a, i * a)

            raise ValueError()
        except ValueError:
            res = 11
            raise

        raise UnreachableError()
    except ValueError:
        assert res == 11
        res = 12

    assert res == 12

    try:
        raise ValueError()
    except:
        res = 13
        print("Any")

    assert res == 13

    try:
        assert False
    except AssertionError:
        res = 14

    assert res == 14

@test
func test_define_variable_in_try_except_branches_1():
    try:
        x: i8 = 1
    except:
        x: i8 = 2

    assert x == 1

@test
func test_define_variable_in_try_except_branches_2():
    try:
        x = 3
    except SystemExitError:
        x = 2
    except ValueError:
        x = 1

    assert x == 3

@test
func test_define_variable_in_try_except_branches_3():
    try:
        x = 3
    except SystemExitError:
        x = 2
    else:
        pass

    assert x == 3

@test
func test_define_variable_in_try_except_branches_4():
    try:
        x = 3
    except SystemExitError:
        x = 2
    else:
        x = 4

    assert x == 4

@test
func test_define_variable_in_all_branches_1():
    try:
        if False:
            x = 1
        else:
            x = 2
    except SystemExitError:
        try:
            x = 3
        except:
            if True:
                x = 4
            else:
                x = 5

    assert x == 2

func my_main(argc: i64) -> i64:
    try:
        if argc == 1:
            value = -1
        elif argc == 2:
            value = -2
        elif argc == 3:
            raise ValueError()
        else:
            raise UnreachableError()
    except ValueError:
        value = 9

    return value

@test
func test_define_variable_in_all_branches_2():
    try:
        res = 1
        assert my_main(0) == 9
    except UnreachableError:
        res = 2

    assert res == 2

    assert my_main(1) == -1
    assert my_main(2) == -2
    assert my_main(3) == 9

func define_variable_in_try_with_return_in_except() -> i64:
    try:
        x = 1
    except Error:
        return -1

    return x

@test
func test_define_variable_in_try_with_return_in_except():
    assert define_variable_in_try_with_return_in_except() == 1

func define_variable_in_try_with_raise_in_except() -> i64:
    try:
        x = 1
    except Error:
        raise

    return x

@test
func test_define_variable_in_try_with_raise_in_except():
    assert define_variable_in_try_with_raise_in_except() == 1

func define_variable_in_except_with_return_in_try() -> i64:
    try:
        return 1
    except Error:
        x = -1

    return x

@test
func test_define_variable_in_except_with_return_in_try():
    assert define_variable_in_except_with_return_in_try() == 1

@test
func test_system_exit_error():
    try:
        raise SystemExitError()
    except SystemExitError:
        res = 1

    assert res == 1

@test
func test_value_error_as():
    try:
        raise ValueError("hi")
    except ValueError as error:
        res = str(error)

    assert res == "ValueError(message=\"hi\")"

@test
func test_except_error():
    try:
        raise ValueError("hi")
    except Error as error:
        res = str(error)

    assert res == "ValueError(message=\"hi\")"

@test
func test_builtin_errors_str():
    assert str(AssertionError("10")) == "AssertionError(message=\"10\")"
    assert str(IndexError("7")) == "IndexError(message=\"7\")"
    assert str(KeyError("6")) == "KeyError(message=\"6\")"
    assert str(NotImplementedError("8")) == "NotImplementedError(message=\"8\")"
    assert str(SystemExitError("11")) == "SystemExitError(message=\"11\")"
    assert str(UnreachableError("11")) == "UnreachableError(message=\"11\")"
    assert str(ValueError("1")) == "ValueError(message=\"1\")"
    assert str(ValueError("3")) == "ValueError(message=\"3\")"
