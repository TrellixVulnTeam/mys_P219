@test
def test_i8():
    x: i8 = 10

    assert x == 10
    assert str(x) == "10"

    x += 117
    assert x == 127

    x -= 127
    x -= 127
    x -= 1
    assert x == -128

    assert i8(1) == 1

@test
def test_i16():
    x: i16 = 10

    assert x == 10
    assert str(x) == "10"

    x += 32757
    assert x == 32767

    x -= 32767
    x -= 32767
    x -= 1
    assert x == -32768

    assert i16(1) == 1

@test
def test_i32():
    x: i32 = 10

    assert x == 10
    assert str(x) == "10"

    x += 2147483637
    assert x == 2147483647

    x -= 2147483647
    x -= 2147483647
    x -= 1
    assert x == -2147483648

    assert i32(1) == 1

    x = 10
    y: i32 = -2

    res: i32 = (5 + 2 * x) - 8 / y
    assert res == 29

    res = ((5 + 2 * x) - 8) / y
    assert res == -8

    res = 3 ** 2
    assert res == 9

    res = 1 << 2
    assert res == 4

    res = 4 >> 2
    assert res == 1

    res = 1 | 8
    assert res == 9

    res = 1 ^ 3
    assert res == 2

    res = 1 & 3
    assert res == 1

    res = 10 % 4
    assert res == 2

@test
def test_i64():
    x: i64 = 10

    assert x == 10
    assert str(x) == "10"

    x += 9223372036854775797
    assert x == 9223372036854775807

    x -= 9223372036854775807
    x -= 9223372036854775807
    x -= 1
    assert x == -9223372036854775808

    assert i64(1) == 1

@test
def test_u8():
    x: u8 = 10

    assert x == 10
    assert str(x) == "10"

    x += 246
    assert x == 0

    x -= 1
    assert x == 255

    assert u8(1) == 1

@test
def test_u16():
    x: u16 = 10

    assert x == 10
    assert str(x) == "10"

    x += 65526
    assert x == 0

    x -= 1
    assert x == 65535

    assert u16(1) == 1

@test
def test_u32():
    x: u32 = 10

    assert x == 10
    assert str(x) == "10"

    x += 4294967286
    assert x == 0

    x -= 1
    assert x == 4294967295

    assert u32(1) == 1

@test
def test_u64():
    x: u64 = 10

    assert x == 10
    assert str(x) == "10"

    x += 18446744073709551606
    assert x == 0

    x -= 1
    assert x == 18446744073709551615

    assert u64(1) == 1

@test
def test_f32():
    x: f32 = 5.0

    assert x == 5.0
    assert str(x) == "5.000000"

    assert f32(1) == 1.0

    res = 3.0 ** 2.0
    assert res == 9.0

@test
def test_f64():
    x: f64 = 10.5

    assert x == 10.5
    assert str(x) == "10.500000"

    assert f64(1) == 1.0

@test
def test_negate_bits():
    assert ~u32(0x10101010) == u32(0xefefefef)
    assert u32(~0x10101010) == 0xefefefef
    assert ~u8(0x10) == u8(0xef)
    assert u8(~0x10) == u8(0xef)
