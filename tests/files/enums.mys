@enum(u8)
class Color:
    Red = 0
    Green = 1
    Blue = 2

@enum
class Color2:
    Red = -10000000000000
    Green = 0
    Blue = 1

@test
func test_all():
    assert Color(0) == Color.Red
    assert Color(1) == Color.Green
    assert Color2.Red == Color2(-10000000000000)
    assert Color2.Green == Color2(0)
    assert Color2.Blue == Color2(1)

    try:
        print(Color(3))
        message = ""
    except ValueError as error:
        message = str(error)

    assert message == "ValueError(message=\"enum Color does not contain 3\")"

@enum
class City:
    Linkoping = 5
    Norrkoping = 8
    Vaxjo = 10

@test
func test_enum_if_else():
    value = City.Linkoping
    res = 0

    if value == City.Linkoping:
        res = 1
    elif value == City.Norrkoping:
        res = 2

    assert res == 1

@test
func test_enum_from_variable():
    value = 8

    assert City(value) == City.Norrkoping

@test
func test_enum_from_invalid_value():
    res = 1

    try:
        print(City(4))
        res = 2
    except ValueError:
        res = 3

    assert res == 3

func enum_foo(cites: [City]) -> bool:
    if cites[0] == City.Linkoping:
        return True
    else:
        return False

@test
func test_enum_list():
    values_1: [City] = [City.Linkoping]
    values_2: [City] = [City.Norrkoping, City.Linkoping]

    assert enum_foo(values_1)
    assert not enum_foo(values_2)

@test
func test_enum_assignment():
    value_1: City = City.Linkoping
    value_2 = City.Vaxjo

    assert value_1 == City.Linkoping
    assert value_2 == City.Vaxjo

func enum_bar(source: City, destination: City) -> City:
    return City.Vaxjo

@test
func test_enum_as_function_parameter_and_return_value():
    value = City.Linkoping

    assert enum_bar(value, City.Norrkoping) == City.Vaxjo

@test
func test_enum_match():
    res = 0
    value = City.Linkoping

    match value:
        case City.Norrkoping:
            res = 1
        case City.Linkoping:
            res = 2

    assert res == 2

@enum
class NoNumbers:
    A
    B
    C

@test
func test_no_numbers():
    value = NoNumbers.B

    assert value != NoNumbers.A
    assert value == NoNumbers.B
    assert value != NoNumbers.C
    assert NoNumbers(1) == NoNumbers.B

@enum
class FirstNumber:
    A = 2
    B
    C

@test
func test_first_number():
    value = FirstNumber.A

    assert value == FirstNumber.A
    assert value != FirstNumber.B
    assert value != FirstNumber.C
    assert FirstNumber(4) == FirstNumber.C

@enum
class EnumToInteger:
    X = 1
    Y

@test
func test_enum_to_integer():
    value: i64 = i64(EnumToInteger.X)

    assert value == 1
    assert i64(EnumToInteger.Y) == 2
    assert u8(EnumToInteger.Y) == 2

@enum(u8)
class EnumToIntegerU8:
    X = 1
    Y

@test
func test_enum_to_integer_u8():
    value: u8 = u8(EnumToIntegerU8.X)

    assert value == 1
    assert u8(EnumToIntegerU8.Y) == 2
    assert i64(EnumToIntegerU8.Y) == 2

c"""header-before-namespace
#define C_VALUES_SECOND 10
"""

@enum
class CValues:
    First = c"5"
    Second = c"C_VALUES_SECOND"
    Third
    Fourth = 15

@test
func test_c_values():
    assert CValues.First == CValues(5)
    assert i64(CValues.Second) == 10
    assert CValues.Third == CValues(0)
    assert i64(CValues.Fourth) == 15

@enum
class WithDocstring:
    "Hi"
    A
    B
