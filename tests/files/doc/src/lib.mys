func add(first: i32, second: i32) -> i32:
    """Returns the sum of given numbers `first` and `second`.

    """

    return first + second

func sub(first: i32, second: i32) -> i32:
    """Returns the diff of given numbers `first` and `second`. With a line
    break.

    """

    return first - second

class Foo:
    a_member: i64
    _a_private_member: i64

    func foo(self) -> i64:
        """Some text on some lines. dpepd ewjpojpd ejpewdj pjpewd jpowed
        jpoewdpj ojpewd jpedw pjpjew dpjoew djpoew djpopjeowd ojpedw
        poj ewdpojpojewd pojwepojd pojwed

        """

        return self.a_member

trait Base:

    func foo(self):
        "This is foo!"

class Bar(Base):

    func foo(self):
        "This is foo as well!"

@test
func test_add():
    """Tests should not be part of the documentation.

    """

    assert add(1, 2) == 3

class Op:
    """Ops.

    """

    func __init__(self):
        pass

    func __mul__(self, other: Op) -> Op:
        return None

    func __idiv__(self, other: Op):
        "Special div op"

trait BaseWithDoc:
    """Some base doc.

    """

    func foo(self):
        "This is foo!"

    func bar(self):
        "This is bar!"

func many_params(a: {i64: [string]},
                b: (i64, u8, [string]),
                c: [string],
                d: {bool: {bool: [Foo]}},
                e: [string],
                f: [string]):
    "Hello!"

class ManyParams:

    func many_params(self,
                    a: i64,
                    b: (i64, u8, [string]),
                    c: [string],
                    d: {bool: {bool: [Foo]}},
                    e: [string],
                    f: [string]) -> {i32: string}:
        "Hello method!"

func default(a: i32 = 77777,
            b: [{string: (Foo, char)}] = [{"hi": (Foo(99999), '5')}, {}]):
    pass

func negative_default(v: i32 = -5):
    pass

class MemberTypes:
    a: [MemberTypes]
    b: {string: (char, MemberTypes)}
    c: string

class MyError(Error):
    pass

class OnlyPrivateMembers:
    _a: i64

    @raises(MyError)
    func foo(self):
        pass

VAR: i32 = 5

func global_variable_as_default(v: i32 = VAR):
    pass

@enum
class Enum:
    A

func global_variable_as_default(v: Enum = Enum.A):
    pass

A_GLOBAL_VAR: i64 = 0
"""Hi!

"""

ANOTHER_GLOBAL_VAR: [(string, bool)] = None
"""Another variable is doing some work!

"""

NO_DOCSTRING: string = ""

_A_PRIVATE_VAR: bool = True

@generic(T1, T2)
@raises(MyError)
func foo(a: T1, b: T2):
    pass
