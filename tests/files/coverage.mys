def foo():
    pass

def bar(a: i64, b: i64) -> i64:
    a += 1

    if a == 2:
        b += 2
    elif a == 5:
        # Hi!
        pass

    # Ho!
    else:
        pass

    while False:
        pass

    for i in range(2):
        if i == 0:
            b += 1
        elif i == 5:
            pass

    return a + b

def fie(v: i64):
    match v:
        case 0:
            pass
        case 1:
            pass
        case _:
            bar(
                v,
                v
            )

class Foo:
    x: i64

    def foo(self) -> i64:
        return self.x

class Bar:
    x: i64

    def __init__(self):
        self.x = 9

    def foo(self) -> i64:
        return self.x

@test
def test_various():
    assert bar(1, 2) == 7
    assert bar(2,
               3) == 7
    assert True
    fie(0)
    fie(5)
    assert Foo(10).foo() == 10
    assert Bar().x == 9

@test
def test_try():
    try:
        raise ValueError()
    except:
        try:
            pass
        except:
            pass
    finally:
        pass

GGG: bool = ggg()

def ggg() -> bool:
    return True

def doc():
    """Docstrings should not be part of coverage.

    """

    print("Hi!")

@test
def test_doc():
    doc()

def multi_line_params(a: i64,
                      b: string):
    print(a, b)

@test
def test_multi_line_params():
    multi_line_params(1, None)

@trait
class Base:

    # Pure method should not be part of code coverage.
    def foo(self):
        pass

    def bar(self):
        print(1)

    def fie(self):
        print(1)

class Fie(Base):

    def foo(self):
        pass

@test
def test_trait():
    Fie().foo()
    Fie().bar()
