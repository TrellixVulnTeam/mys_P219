test bytes_asserts():
    a = b"1"
    b = b"1"
    assert a is a
    assert a is not b
    assert None is not a
    assert b is not None

test bytes_compare():
    a = b"1"
    b = b"1"

    if not (a is a):
        assert False

    if not (a is not b):
        assert False

    if not (None is not a):
        assert False

    if not (b is not None):
        assert False

    if "" is None:
        assert False

    if a != b:
        assert False

test bytes():
    v1 = b"\x12\x34\x56"
    v2: bytes = b""

    assert v1 == b"\x12\x34\x56"
    assert v2 == b""
    assert v1 != v2

    if v1 != b"\x12\x34\x56":
        assert False

    if v2 != b"":
        assert False

    if v1 == v2:
        assert False

    assert v1.length() == 3
    assert v2.length() == 0

    v1 += 0x78
    assert v1 == b"\x12\x34\x56\x78"

    v1 += b"\x9a"
    assert v1 == b"\x12\x34\x56\x78\x9a"

    assert v1[0] == 0x12
    assert v1[1] == 0x34
    assert v1[4] == 0x9a

    v1[0] = 0
    v1[1] += 1
    t = v1[2]
    t = 1
    assert v1 == b"\x00\x35\x56\x78\x9a"

test bytes_str_of_none():
    v: bytes = None

    assert str(v) == "None"

test bytes_str():
    v = b"\x1faf\x90"

    assert str(v) == "b\"\\x1faf\\x90\""

test negative_bytes_index():
    values = b"\x00\x02\x04\x06"

    assert values[-1] == 6
    assert values[-2] == 4
    assert values[-4] == 0

test init():
    v = bytes(10)
    assert v.length() == 10

test hex():
    assert bytes("0123456789abcdef") == b"\x01\x23\x45\x67\x89\xab\xcd\xef"
    assert b"\x01\x23\x45\x67\x89\xab\xcd\xef".to_hex() == "0123456789abcdef"
    assert bytes("0123456789ABCDEF") == b"\x01\x23\x45\x67\x89\xab\xcd\xef"
    assert b"\x01\x23\x45\x67\x89\xab\xcd\xef".to_hex() == "0123456789abcdef"

    try:
        message = ""
        bytes("1")
    except ValueError as error:
        message = str(error)

    assert message == "ValueError(message=\"odd length hex\")"

    try:
        message = ""
        bytes("1g")
    except ValueError as error:
        message = str(error)

    assert message == "ValueError(message=\"invalid hex letter\")"

test find():
    assert b"".find(b"x") == -1
    assert b"x".find(b"x", 1, 1) == -1
    assert b"x".find(b"x", 2, 1) == -1

    x = b"find t or t"
    assert x.find(b"t", 0, 6) == 5
    assert x.find(b"ind", 0, 6) == 1
    assert x.find(b" t", 2, 8) == 4
    assert x.find(b"t", 0, 5) == -1

    assert x.find(b"q", 0) == -1
    assert x.find(b"t", 6) == 10
    assert x.find(b"t", 10) == 10
    assert x.find(b"t", 11) == -1
    assert x.find(b"t", -1) == 10
    assert x.find(b"t", -100) == 5
    assert x.find(b"t", 0, -5) == 5
    assert x.find(b"t", 0, -6) == -1

    assert x.find(b"t") == 5
    assert x.find(b"t") == 5
    assert x.find(b"ind") == 1

    # assert b"".find_reverse(b"t") == -1
    # assert x.find_reverse(b"t", 0, 6) == 5
    # assert x.find_reverse(b"t", 4, 6) == 5
    # assert x.find_reverse(b"t", 8) == 10
    # assert x.find_reverse(b"t") == 10
    # assert x.find_reverse(b"t") == 10

test reserve():
    data = b""
    data.reserve(16)
    assert data == b""
    data += 1
    assert data == b"\x01"

test slice():
    a = b"cactus"

    assert a[1:3:1] == b"ac"
    assert a[-2:6:] == b"us"
    assert a[-2:6] == b"us"

    assert a[:6:2] == b"ccu"
    x = 1
    assert a[:6:x+x] == b"ccu"

    assert a[100:-100:-1] == b"sutcac"
    assert a[5:-100:-1] == b"sutcac"
    assert a[5:-7:-1] == b"sutcac"
    assert a[-1:-7:-1] == b"sutcac"
    assert a[4:0:-1] == b"utca"
    assert a[4:-7:-1] == b"utcac"
    assert a[4:-6:-1] == b"utca"
    assert a[4:0:-1] == b"utca"

    assert a[:] == b"cactus"
    assert a[::] == b"cactus"
    assert a[1::] == b"actus"
    assert a[1:] == b"actus"
    assert a[1::1] == b"actus"

    assert a[::-1] == b"sutcac"
    assert a[::-2] == b"sta"

    assert a == b"cactus"

test starts_with():
    s = b"hello"

    assert s.starts_with(b"")
    assert s.starts_with(b"h")
    assert s.starts_with(b"hell")
    assert s.starts_with(b"hello")
    assert not s.starts_with(b"hello!")
    assert not s.starts_with(b"e")

test ends_with():
    s = b"hello"

    assert s.ends_with(b"")
    assert s.ends_with(b"o")
    assert s.ends_with(b"ello")
    assert s.ends_with(b"hello")
    assert not s.ends_with(b"hello!")
    assert not s.ends_with(b"e")

test resize():
    data = b"1234"
    data.resize(5)
    assert data == b"1234\x00"
    data.resize(3)
    assert data == b"123"
    data.resize(0)
    assert data == b""

test copy_into():
    data = b"123456789"
    data.copy_into(b"abcd", 1, 3, 1)
    assert data == b"1bc456789"

test length():
    assert b"12".length() == 2
