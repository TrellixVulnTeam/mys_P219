func one() -> i64:
    return 1

func two() -> [string]:
    return ["c", "d"]

test one():
    # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
    for i in range(10):
        print("range(10):", i)

    # 5
    for i in range(5, 6):
        print("range(5, 6):", i)

    # 1, 3, 5, 7, 9
    for i in range(1, 10, 2):
        print("range(1, 10, 2):", i)

    # -4, -3, -2, -1, 0
    for i in range(-4, 1):
        print("range(-4, 1):", i)

    # 9, 8, 7, 6, 5, 4, 3, 2, 1, 0
    for i in range(9, -1, -1):
        print("range(9, -1, -1):", i)

    # 100, 97, 94, 91
    for i in range(100, 90, -3):
        print("range(100, 90, -3):", i)

test two():
    # 10, 14, 18
    a = 10
    b = 20
    c = 4

    for i in range(a, b, c):
        print("range(a, b, c):", i)

    # 10, 7, 4, 1
    a = 10
    b = 0
    c = -3

    for i in range(a, b, c):
        print("range(a, b, c):", i)

    # 1, 2
    for i in range(one(), one() + 2, one()):
        print("range(one(), one() + 2, one()):", i)

    # 0 1, 1 5, 2 3
    for i, j in enumerate([one(), 5, 3]):
        print("in enumerate([one(), 5, 3]):", i, j)

    # 1.0, 5.2, -3.7
    res = 0.0

    for i in [1.0, 5.2, -3.7]:
        res += i

    assert res > 2.49
    assert res < 2.51

    # 1 a, 2 b
    d: {i32: string} = {1: "a", 2: "b"}
    res_key : [i64] = []
    res_value : [string] = []

    for k, v in d:
        print("in d:", k, v)
        res_key.append(k)
        res_value.append(v)

    res_key.sort()
    assert res_key == [1, 2]
    res_value.sort()
    assert res_value == ["a", "b"]

test three():
    values: [string] = []

    for i in two():
        values.append(i)

    assert values[0] == "c"
    assert values[1] == "d"

    for i in range(10):
        if i == 0:
            print("range(10):", i)
        elif i == 1:
            continue
        elif i < 5:
            print("range(10):", i)
        else:
            break

    for _ in range(2):
        print("range(2):", "_")

    while False:
        pass

    while True:
        break

test slice_of_string():
    for ch in slice("12", 1):
        assert ch == '2'

test zip_of_string():
    text = ""
    values: [i64] = []

    for ch, v in zip("12", [3, 4]):
        text += ch
        values.append(v)

    assert text == "12"
    assert values == [3, 4]

test assign_to_loop_variable():
    for i in [1, 3]:
        i = 0
        assert i == 0

    for ch in "123":
        ch = '5'
        assert ch == '5'
