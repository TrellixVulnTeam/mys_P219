func list_from_return_type_1() -> [string]:
    x = []

    return x

@test
func test_list_from_return_type_1():
    assert list_from_return_type_1() == []

func list_from_return_type_2() -> [string]:
    x = []
    x.append(None)

    return x

@test
func test_list_from_return_type_2():
    assert list_from_return_type_2() == [None]

func list_from_return_type_3() -> [string]:
    x = []
    x = []

    return x

@test
func test_list_from_return_type_3():
    assert list_from_return_type_3() == []

func list_assignment_after_definition_with_type() -> [i64]:
    x: [i64] = []
    x = []

    return x

@test
func test_list_assignment_after_definition_with_type():
    assert list_assignment_after_definition_with_type() == []

func dict_from_return_type_1() -> {string: i64}:
    x = {}

    return x

@test
func test_dict_from_return_type_1():
    assert dict_from_return_type_1() == {}

func dict_from_return_type_2() -> {i64: string}:
    x = {}
    x[1] = None

    return x

@test
func test_dict_from_return_type_2():
    assert dict_from_return_type_2() == {1: None}

func set_from_return_type_1() -> {string}:
    x = {}

    return x

@test
func test_set_from_return_type_1():
    assert set_from_return_type_1() == {}

func set_from_return_type_2() -> {i64}:
    x = {}
    x.add(1)

    return x

@test
func test_set_from_return_type_2():
    assert set_from_return_type_2() == {1}

@test
func test_for_variables():
    for i in [1, 3]:
        i = 0

    for ch in "123":
        ch = '5'

    for k, v in {1: "2", 3: "4"}:
        k = 0
        v = None

@test
func test_list_with_values():
    v = [1, 3]
    v = None
    assert v is None

func none_from_return_type() -> string:
    x = None

    return x

@test
func test_none_from_return_type():
    assert none_from_return_type() is None

@test
func test_list_from_append_integer():
    x = []
    x.append(1)
    print(x)

@test
func test_list_from_append_none_and_string():
    x = []
    x.append(None)
    x.append("hi")

    print(x)

@test
func test_list_from_append_i64():
    x = []
    x.append(i64("2"))
    y = []
    y.append(bytes(2))
    z = []
    z.append(string(b""))

    print(x, y, z)

func append_function_return_value() -> i64:
    return 5

@test
func test_append_function_return_value():
    x = []
    x.append(append_function_return_value())

    print(x)

func extend_function_return_value() -> [i64]:
    return [5, 2]

@test
func test_extend_function_return_value():
    x = []
    x.extend(extend_function_return_value())

    print(x)
