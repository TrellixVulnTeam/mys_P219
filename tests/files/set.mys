@test
def test_set():
    a = {1, 2, 3, 2}
    b = {2, 2, 3, 3, 4}
    assert a == {1, 2, 3}
    assert b == {2, 3, 4}

@test
def test_set_op():
    a = {1, 2, 3, 2}
    b = {2, 2, 3, 3, 4}

    assert a != b
    assert a & b == {2, 3}
    assert a.intersection(b) == {2, 3}
    assert b - a == {4}
    assert a - b == {1}
    assert b.difference(a) == {4}
    assert a.difference(b) == {1}
    assert a | b == {1, 2, 3, 4}
    assert a.union(b) == {1, 2, 3, 4}
    assert a ^ b == {1, 4}
    assert a.symmetric_difference(b) == {1, 4}

    s = {1, 2, 3, 2}
    s &= {2, 3, 4}
    assert s == {2, 3}
    s |= {4}
    assert s == {2, 3, 4}
    s -= {2, 4}
    assert s == {3}
    s ^= {1, 3}
    assert s == {1}
    s.add(4)
    assert s == {1, 4}
    s.clear()
    assert s == {}

    s1 = {1, 2, 3, 2}
    x  = {2, 3, 4}
    s1.intersection_update(x)
    assert s1 == {2, 3}
    x1  = {4}
    s1.update(x1)
    assert s1 == {2, 3, 4}
    x2  = {2, 4}
    s1.difference_update(x2)
    assert s1 == {3}
    x3  = {1, 3}
    s1.symmetric_difference_update(x3)
    assert s1 == {1}

    s = {1, 2, 3}
    assert (s & {2, 3, 4} | {5}) - {3, 5} == {2}
    s.remove(2)
    assert s == {1, 3}
    s.discard(1)
    assert s == {3}

    res = 0
    try:
        s.remove(666)
    except KeyError:
        res = 1
    assert res == 1

@test
def test_set_op_2():
    x = [1, 2, 3]
    a = set(x)
    b = {1, 2, 3, 4}
    c = {1, 2}
    d = {1, 2, 2, 1}
    e = {6, 7}

    assert 3 in a
    assert 4 not in a
    assert 4 in b

    assert a < b
    assert a.is_proper_subset(b)
    assert a <= b
    assert a.is_subset(b)
    assert c < a
    assert c.is_proper_subset(a)
    assert c < b
    assert c.is_proper_subset(b)
    assert b > c
    assert b.is_proper_superset(c)
    assert not b < c
    assert c == d
    assert not c < d
    assert not c > d
    assert c <= d
    assert c >= d

    assert d.is_disjoint(e)
    assert not d.is_disjoint(a)

    assert len(a) == 3
    assert len(b) == 4

    assert max(a) == 3
    assert min(a) == 1
    assert max(b) == 4
    assert min(b) == 1

@test
def test_set_type():
    a: {i32} = {3}
    assert a == {3}

    b: {i64} = {4}
    assert b == {4}

    c: {i64} = {}
    c = c | {3}
    assert c == {3}

    d: {i8} = {}
    d = d | {3}
    assert d == {3}

class Class:
    a: {string}
    b: {u64}

    def __init__(self, a : {string}, b : {u64}):
        self.a = a
        self.b = b

@test
def test_class():
    foo = Class({"a", "b"}, {1, 2, 3})

    foo.a.add("c")
    foo.b &= {3, 4}
    assert "a" in foo.a
    assert "c" in foo.a
    assert 3 in foo.b

@test
def test_set_str():
    a = {"a", "b"}
    b = {"b", "c"}

    assert a & b == {"b"}

@test
def test_set_comprehension():
    a = {x for x in [1, 2, 4, 5] if x not in [1, 2, 3]}
    assert a == {4, 5}

@test
def test_intersection():
    a = {1, 2, 3, 5, 7, 4}
    a &= {10, 1, 4}
    assert a == {1, 4}

@test
def test_intersection_char():
    a = {'1', '2', '3'}
    a &= {'a', '1', '4'}
    assert a == {'1'}

@test
def test_reference():
    s1 = {"1", "3"}
    s2 = s1
    assert s1 is s2
    s2 |= {"5"}
    assert s1 is s2
    assert s2 == {"1", "3", "5"}
    assert s1 == {"1", "3", "5"}
    assert s1 == s2

@test
def test_iteratfor_loop():
    s = {1, 3, 5}
    x = 0

    for v in s:
        x += v

    assert x == 9

class ClassInSet:
    x: i64

@test
def test_class_in_set():
    v: {ClassInSet} = {}
    v.add(ClassInSet(1))
    v.add(ClassInSet(20))
    assert ClassInSet(1) in v
    assert ClassInSet(20) in v
    v.remove(ClassInSet(1))
    assert ClassInSet(1) not in v
    assert ClassInSet(20) in v

@test
def test_infer_type_in_tuple():
    assert ({1}, ) != ({}, )
