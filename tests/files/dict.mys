@test
def test_dict_1():
    a = {1: 2, 3: 4}

    assert 1 in a
    assert 2 not in a
    assert a[1] == 2
    assert a[3] == 4
    assert a.get(1, -1) == 2
    assert a.get(2, -1) == -1

    a[1] = 5
    assert a[1] == 5

    try:
        print(a[4])
        res = 1
    except KeyError:
        res = 2

    assert res == 2

@test
def test_dict_2():
    a: {i64: i64} = {}
    assert len(a) == 0
    a[-1] = 1
    assert len(a) == 1

@test
def test_dict_3():
    a: {u8: bool} = {5: False}
    assert not a[5]
    assert a.get(4, True)

class DictFoo:
    v: i32

@test
def test_dict_4():
    a: {i64: DictFoo} = {}
    assert len(a) == 0

    a[0] = DictFoo(10)
    a[1] = DictFoo(5)
    assert a[0].v == 10
    assert a[1].v == 5

    b = a[0]
    assert b.v == 10

def dict_foo(v: {i64: bool}) -> {i64: bool}:
    v[5] = True

    return v

@test
def test_dict_5():
    a: {i64: bool} = {}
    b = dict_foo(a)
    assert 5 in a
    assert 5 in b
    assert a is b
    c: {i64: bool} = {}
    assert a is not c

@test
def test_iterate_over_call_return_value():
    key = 0
    value = False

    for k, v in dict_foo({}):
        key = k
        value = v

    assert key == 5
    assert value

@test
def test_dict_6():
    a: {u32: bool} = {1: True}

    a[1] = False
    assert not a[1]

@test
def test_dict_7():
    a: {u32: u8} = {1: 5}

    assert a[1] == 5
    a[1] += 1
    assert a[1] == 6

@test
def test_dict_string_value():
    a: {i64: string} = {}
    a[-1] = "erik"
    a[-1] += " m"
    assert a[-1] == "erik m"

@test
def test_dict_string_key():
    a: {string: bool} = {"d": False}
    a["a"] = True
    a["b"] = False
    a["c"] = True
    assert a["a"]
    assert not a["b"]
    assert a["c"]
    assert "d" in a

@test
def test_dict_methods():
    d = {"a": 1, "b": 2}
    keys = d.keys()
    keys.sort()
    assert keys == ["a", "b"]

    values = d.values()
    values.sort()
    assert values == [1, 2]

    assert d.get("a", -1) == 1
    assert d.get("c", -1) == -1

    assert d.pop("a", -1) == 1
    assert d.pop("a", 5) == 5
    d.update({"z": 7, "b": 3})
    assert d.get("b", -1) == 3

    d.clear()
    assert len(d) == 0

    d.clear()
    assert len(d) == 0

@test
def test_str_dict():
    assert str({1: 4}) == "{1: 4}"

@test
def test_list_from_dict():
    values = list({1: "a", 2: "b"})

    assert len(values) == 2
    assert (1, "a") in values
    assert (2, "b") in values

    for pair in values:
        assert pair[0] in [1, 2]
        assert pair[1] in ["a", "b"]

    for k, v in values:
        assert k in [1, 2]
        assert v in ["a", "b"]

@test
def test_iterate_over_dict_keys():
    values = {1: "a"}

    for key in values.keys():
        assert key == 1

@test
def test_compare_dicts_1():
    assert {1: 2} == {1: 2}

    if {1: 2} == {1: 2}:
        pass
    else:
        assert False

    if {1: 2} != {1: 2}:
        assert False

    res = 0

    try:
        assert {1: 2} == {3: 4}
    except AssertionError:
        res = 1

    assert res == 1

@test
def test_compare_dicts_2():
    res = 0

    if {1: 2} is {1: 3}:
        assert False

    try:
        assert {1: 2} is {1: 3}
    except AssertionError:
        res = 1

    if {1: 2} is not {1: 2}:
        assert False

    try:
        assert {1: 2} is not {1: 2}
    except AssertionError:
        res = 1

    assert res == 1

    assert {1: 2} is not None

    if {1: 2} is not None:
        pass
    else:
        assert False

@test
def test_compare_dicts_3():
    values: {bool: i64} = None
    res = 0

    try:
        if values == {False: 1}:
            pass
    except NoneError:
        res = 1

    assert res == 1

class StringKey:
    a: {string: i64}

@test
def test_string_dict_key_in_class_member():
    assert StringKey({"1": 2}).a == {"1": 2}

@test
def test_dict_acces_none():
    v: {bool: i32} = None
    res = 0

    try:
        print(v[True])
    except NoneError:
        res = 1

    assert res == 1

@test
def test_dict_len_of_none():
    v: {u8: string} = None
    res = 0

    try:
        print(len(v))
    except NoneError:
        res = 1

    assert res == 1

@test
def test_dict_str_of_none():
    v: {u8: string} = None

    assert str(v) == "None"

@test
def test_dict_in_dict():
    v: {string: {string: i64}} = {}
    assert v == {}
    assert len(v) == 0

    try:
        v["a"]["b"] = 0
    except KeyError:
        pass

    assert len(v) == 0

    v["a"] = {}
    assert len(v) == 1
    assert len(v["a"]) == 0

    v["a"]["b"] = 0
    assert len(v) == 1
    assert len(v["a"]) == 1
    assert v == {"a": {"b": 0}}
    assert v["a"].pop("b", -1) == 0
    assert v == {"a": {}}

@test
def test_set_none():
    m: {string: i64} = None

    try:
        raised = False
        m["a"] = 1
    except NoneError:
        raised = True

    assert raised

@test
def test_reference():
    d1 = {"1": True, "3": False}
    d2 = d1
    d2["5"] = True
    assert d1 is d2
    assert d2 == {"1": True, "3": False, "5": True}
    assert d1 == {"1": True, "3": False, "5": True}
    assert d1 == d2

@test
def test_many_string_keys():
    v: {string: u8} = {}

    for i in range(1000):
        v[str(i)] = 0

    assert len(v) == 1000
