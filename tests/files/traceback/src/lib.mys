from fiber import Fiber

test panic():
    print(""[1])

func panic_2():
    i = 10
    print(""[i])

test panic_2():
    panic_2()

func panic_in_except():
    raise ValueError()

test panic_in_except():
    try:
        panic_in_except()
    except:
        print(b""[11])

test panic_in_if():
    if True:
        print(b""[5])

test panic_in_else():
    if False:
        pass
    else:
        print(b""[6])

test panic_in_for():
    for i in range(10):
        print(b"123"[i])

test panic_in_while():
    while True:
        print(b""[10])

test panic_in_match():
    match 1:
        case 1:
            print(b""[-1])

class MyError(Error):
    x: i64
    y: i64

test error_in_runtime():
    raise MyError(1, 2)

class MyFiber(Fiber):

    func run(self):
        raise MyError(2, 3)

test error_in_fiber():
    my_fiber = MyFiber()
    my_fiber.start()
    my_fiber.join()

func modulo(a: i64, b: i64) -> i64:
    return a % b

test modulo_zero():
    assert modulo(10, 2) == 0
    assert modulo(10, 0) == 0

func divide(a: i64, b: i64) -> i64:
    return a / b

test division_by_zero():
    assert divide(10, 2) == 5
    assert divide(10, 0) == 5

class Desctuctor:
    pass

# Must return something to trigger traceback bug in destructor.
func function_that_raises() -> string:
    raise ValueError()

test destructor():
    desctuctor = Desctuctor()
    function_that_raises()
    print(desctuctor)
