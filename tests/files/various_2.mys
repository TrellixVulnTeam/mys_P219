@test
def test_iterate_over_enumerate_1():
    values: [u32] = [3, 8, 1]
    i_acc = 0
    value_acc: u32 = 0

    for i, value in enumerate(values):
        i_acc += i
        value_acc += value

    assert i_acc == 3
    assert value_acc == 12

@test
def test_iterate_over_enumerate_2():
    i_acc = 0
    value_acc = 0

    for i, value in enumerate([3, 8, 1]):
        i_acc += i
        value_acc += value

    assert i_acc == 3
    assert value_acc == 12

@test
def test_iterate_over_enumerate_3():
    i_acc = 0
    value_acc = 0

    for i, value in enumerate(range(5), 1):
        i_acc += i
        value_acc += value

    assert i_acc == 15
    assert value_acc == 10

@test
def test_iterate_over_enumerate_4():
    i_acc = 0
    value_acc = 0
    x = 5
    y = 1

    for i, value in enumerate(range(x), y):
        i_acc += i
        value_acc += value

    assert i_acc == 15
    assert value_acc == 10

@test
def test_iterate_over_enumerate_negative_initial():
    acc = 0

    for i, value in enumerate(range(5), -5):
        acc += i

    assert acc == -15

@test
def test_iterate_over_nested_enumerates():
    ij_acc = 0
    values_acc = 0

    for i, value_1 in enumerate([3, 8, 1]):
        ij_acc += i
        values_acc += value_1

        for j, value_2 in enumerate([-1, 3]):
            ij_acc += j
            values_acc += value_2

    assert ij_acc == (0 + 1 + 2) + 3 * (0 + 1)
    assert values_acc == (3 + 8 + 1) + 3 * (-1 + 3)

@test
def test_iterate_over_zip():
    acc = 0

    for x, y in zip(range(5), [3, 8, 1, 4, -2]):
        acc += x
        acc += y

    assert acc == 24

@test
def test_iterate_over_three_zip():
    acc = 0

    for x, y, z in zip(range(2), [3, 8], range(1, 3)):
        acc += x
        acc += y
        acc += z

    assert acc == 15

@test
def test_iterate_over_zip_mixed_types():
    s = ""
    acc = 0

    for x, y in zip(["a", "b"], range(1, 3)):
        s += x
        acc += y

    assert s == "ab"
    assert acc == 3

@test
def test_iterate_over_slice_1():
    acc = 0

    for x in slice(range(4), 2):
        acc += x

    assert acc == 5

@test
def test_iterate_over_slice_2():
    acc = 0
    s = ""

    for x, y in zip(slice(range(4), 2), ["a", "b"]):
        acc += x
        s += y

    assert acc == 5
    assert s == "ab"

@test
def test_iterate_over_slice_3():
    acc = 0

    for x in slice(range(10), 2, 4):
        acc += x

    assert acc == 5

@test
def test_iterate_over_slice_4():
    acc = 0

    for x in slice(range(10), 2, 5, 2):
        acc += x

    assert acc == 6

@test
def test_iterate_over_slice_5():
    acc = 0

    for x in slice(range(10), 2, -5, 2):
        acc += x

    assert acc == 6

@test
def test_iterate_over_slice_6():
    acc = 0

    for x in slice(range(10), -3, -1):
        acc += x

    assert acc == 15

@test
def test_iterate_over_slice_7():
    acc = 0

    for x in slice(range(10), 0, 10, -1):
        acc += x

    assert acc == 0

@test
def test_iterate_over_slice_8():
    acc = 0

    for x in slice(range(10), 1, 2, -1):
        acc += x

    assert acc == 0

@test
def test_iterate_over_slice_9():
    res = 0

    try:
        for x in slice(range(10), 0, 10, 0):
            res = 1
    except ValueError:
        res = 2

    assert res == 2

@test
def test_iterate_over_slice_10():
    acc = 0

    for x in slice(range(10), 10, 12):
        acc += x

    assert acc == 0

@test
def test_iterate_over_slice_11():
    acc = 0

    for x in slice(range(10), -12, -10):
        acc += x

    assert acc == 0

@test
def test_iterate_over_slice_12():
    s = ""

    for x in slice(["a", "b", "c", "d"], 2, 0, -1):
        s += x

    assert s == "cb"

@test
def test_iterate_over_slice_13():
    s = ""

    for x in slice(["a", "b", "c", "d"], -4, -3):
        s += x

    assert s == "a"

@test
def test_iterate_over_slice_14():
    s = ""

    for x in slice(["a", "b", "c", "d"], 0, 1):
        s += x

    assert s == "a"

@test
def test_iterate_over_slice_15():
    s = ""

    for x in slice(["a", "b", "c", "d"], -10, 1):
        s += x

    assert s == "a"

@test
def test_iterate_over_slice_16():
    s = ""

    for x in slice(["a", "b", "c", "d"], 3, 10):
        s += x

    assert s == "d"

@test
def test_iterate_over_slice_17():
    s = ""

    for x in slice(["a", "b", "c", "d"], 4, 10):
        s += x

    assert s == ""

@test
def test_iterate_over_slice_18():
    acc = 0
    s = ""

    for i, x in slice(enumerate(["a", "b", "c", "d"]), -3, -2):
        acc = i
        s = x

    assert acc == 1
    assert s == "b"

@test
def test_iterate_over_slice_19():
    s = ""

    for x in slice(["a", "b", "c", "d"], 5):
        s += x

    assert s == ""

@test
def test_iterate_over_slice_20():
    s = ""

    for x in slice(["a", "b", "c", "d"], -5):
        s += x

    assert s == "abcd"

@test
def test_iterate_over_slice_21():
    s = ""

    for x in slice(["a", "b", "c", "d"], 3, -1, -1):
        s += x

    assert s == ""

@test
def test_iterate_over_slice_22():
    s = ""

    for x in slice(["a", "b", "c", "d"], 3, -2, -1):
        s += x

    assert s == "d"

@test
def test_iterate_over_slice_23():
    s = ""

    for x in slice(["a", "b", "c", "d"], 2, -1, -1):
        s += x

    assert s == ""

@test
def test_iterate_over_slice_24():
    s = ""

    for x in slice(slice(["a", "b", "c", "d"], 1), 1):
        s += x

    assert s == "cd"

@test
def test_iterate_over_reversed_1():
    s = ""

    for x in reversed(["a", "b", "c", "d"]):
        s += x

    assert s == "dcba"

@test
def test_iterate_over_reversed_2():
    s = ""

    for x in reversed(slice(["a", "b", "c", "d"], 3, 1, -1)):
        s += x

    assert s == "cd"

@test
def test_iterate_over_reversed_3():
    s = ""

    for x in reversed(slice(["a", "b", "c", "d"], 3, 0, -2)):
        s += x

    assert s == "bd"

@test
def test_iterate_over_reversed_4():
    s = ""

    for x in reversed(slice(["a", "b", "c", "d"], 0, 3, 2)):
        s += x

    assert s == "ca"

@test
def test_iterate_over_reversed_5():
    s = ""

    for x in reversed(slice(range(4), 0, 3, 2)):
        s += str(x)

    assert s == "20"

@test
def test_iterate_over_reversed_6():
    s1 = ""
    s2 = ""

    for i, x in reversed(slice(enumerate(range(4), 5), 0, 3, 2)):
        s1 += str(i)
        s2 += str(x)

    assert s1 == "75"
    assert s2 == "20"

@test
def test_iterate_over_zip_not_same_lengths_1():
    res = 0

    try:
        for i, j in zip(range(1), range(2)):
            print(i, j)

        res = 1
    except ValueError:
        res = 2

    assert res == 2

@test
def test_iterate_over_zip_not_same_lengths_2():
    res = 0

    try:
        for i, j, k in zip(range(2), range(2), [1, 2, 3]):
            print(i, j, k)

        res = 1
    except ValueError:
        res = 2

    assert res == 2

@test
def test_iterate_over_zip_not_same_lengths_3():
    res = 0

    for i, (j, k) in enumerate(zip(range(2), range(2))):
        res += i
        res += j
        res += k

    assert res == 3

@test
def test_iterate_over_zip_not_same_lengths_4():
    res: [i64] = []

    for (i, j), k in zip(enumerate(range(2)), slice(range(4), 2)):
        res.append(i)
        res.append(j)
        res.append(k)

    assert res[0] == 0
    assert res[1] == 0
    assert res[2] == 2
    assert res[3] == 1
    assert res[4] == 1
    assert res[5] == 3

@test
def test_return_none():
    return

def foo_list(values: [i64]) -> i64:
    return values[0]

@test
def test_function_parameter_list():
    values = [5, 6]

    assert foo_list(values) == 5

@test
def test_assert_list_is_not_none():
    assert [1, 3] is not None

@test
def test_assert_none_is_not_string():
    assert None is not [0]

@test
def test_list_is_not_none():
    res = 0

    if [1, 3] is not None:
        res = 1

    assert res == 1

@test
def test_none_is_not_string():
    res = 0

    if None is not [0]:
        res = 1

    assert res == 1

@test
def test_none_is_none():
    res = 0

    if None is None:
        res = 1

    assert res == 1

@test
def test_list_as_none():
    value: [bool] = None

    assert value is None

class MembersFoo:

    pass

class Members:

    a: MembersFoo
    b: [i32]
    c: string
    d: u64
    e: (bool, string)

    def kalle(self, v: [u16]) -> u16:
        return v[0]

    def bobo(self) -> u16:
        return self.kalle([5]) + 1

@test
def test_class_member_values():
    a = MembersFoo()
    b: [i32] = []
    members = Members(a, b, "hi", 1, (False, "ho"))
    assert members.a is a
    assert members.a is not None
    assert members.b is b
    assert members.b is not None
    assert members.c == "hi"
    assert members.d == 1
    assert not members.e[0]
    assert members.e[1] == "ho"
    assert members.kalle([2]) == 2
    assert members.bobo() == 6

class PrivateMembers:

    _a: MembersFoo
    _b: [i32]
    _c: string
    _d: u64
    _e: (bool, string)
    _f: bool
    _g: char

    def get_a(self) -> MembersFoo:
        return self._a

    def get_b(self) -> [i32]:
        return self._b

    def get_c(self) -> string:
        return self._c

    def get_d(self) -> u64:
        return self._d

    def get_e(self) -> (bool, string):
        return self._e

    def get_f(self) -> bool:
        return self._f

    def get_g(self) -> char:
        return self._g

@test
def test_class_private_member_default_zero_values():
    members = PrivateMembers()
    assert members.get_a() is None
    assert members.get_b() is None
    assert members.get_c() is None
    assert members.get_d() == 0
    assert members.get_e() is None
    assert not members.get_f()
    assert members.get_g() == ''

def bar_list_1(values: [i32]) -> i32:
    res: i32 = 0

    for value in values:
        res += value

    return res

@test
def test_inferred_integer_list_type_1():
    assert bar_list_1([1, -5]) == -4

def bar_list_2(v: [i64]) -> [i64]:
    return v

@test
def test_inferred_integer_list_type_2():
    assert bar_list_2([]) == []
    assert bar_list_2([1, -5]) == [1, -5]

    if bar_list_2([1, -5]) != [1, -5]:
        assert False

@test
def test_len():
    assert len("123") == 3

class NestedFoo:

    value: i32

class NestedBar:

    foo: NestedFoo

@test
def test_link():
    bar = NestedBar(NestedFoo(-5))

    assert bar.foo.value == -5

class PrivateMember:
    _a: i32

    def _bar(self):
        self._a += 1

    def foo(self) -> i32:
        self._bar()

        return self._a

@test
def test_private_member():
    pm = PrivateMember()
    assert pm.foo() == 1

class PublicAndPrivateMembers:
    a: i32
    _b: bool
    _c: string

    def get_b(self) -> bool:
        return self._b

    def get_c(self) -> string:
        return self._c

@test
def test_public_and_private_members():
    assert PublicAndPrivateMembers(10).a == 10
    assert not PublicAndPrivateMembers(10).get_b()
    assert PublicAndPrivateMembers(10).get_c() is None

@test
def test_str_bool():
    assert str(True) == "True"
    assert str(False) == "False"

class AccessFoo:
    member: bool

    def func(self):
        pass

@test
def test_class_none_1():
    foo: AccessFoo = None
    res = 0

    assert foo is None

    try:
        print(foo.member)
    except NoneError:
        res = 1

    assert res == 1

    try:
        foo.func()
    except NoneError:
        res = 2

    assert res == 2

@test
def test_class_none_2():
    foo: AccessFoo = None
    foo2 = foo

    assert foo2 is foo

    foo = AccessFoo(True)

    assert foo is not foo2
    assert foo2 is None
    assert foo.member

@test
def test_float_literal():
    v = 1.0
    assert v == 1.0

    v = 1.0 + 2.0
    assert v == 1.0 + 2.0
    assert 3.0 == 1.0 + 2.0

    values = [1.0, 2.0]
    assert values == [1.0, 2.0]
