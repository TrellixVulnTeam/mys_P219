# pylint: disable=using-constant-test
# pylint: disable=undefined-variable

c"""source-before-namespace
#if 0
#endif
"""

func foobar() -> i32:
    return 5

V1: i32 = (1 << 2) / 2
V2: i32 = foobar() + 1
V3: [u64] = [1, 1 + 1]
V4: [bool]? = None
V5: i32 = V1

func barfoo(_a: (i32, string)):
    "A docstring."

func fie(a: string) -> string:
    return 2 * a

class Adder:

    value: i32
    base: i32

    func add(self, a: i32, b: i32) -> i32:
        "Docstring."

        return self.base + self.value + a + b

func calc(adder: Adder) -> i32:
    return adder.add(1, 4)

test one():
    res = 0

    if True:
        res = 1

    assert res == 1

    if False:
        res = 2
    else:
        res = 3

    assert res == 3

    if False:
        res = 4
    elif False:
        res = 5
    elif True:
        res = 6
    else:
        res = 7

    assert res == 6

test two():
    assert V1 == 2
    assert V2 == 6
    assert V3[0] == 1
    assert V3[1] == 2
    assert V4 is None
    assert V5 == (1 << 2) / 2

    adder = Adder(1, 0)
    assert adder.base == 0
    assert adder.value == 1
    adder.value += 1
    assert adder.value == 2
    assert str(adder) == "Adder(value=2, base=0)"
    # Print a class should work.
    print(adder)
    assert calc(adder) == 7

test three():
    s = "hello"
    print("s:", s, s.length(), str(s))
    assert s.length() == 5
    assert str(s) == f"\"{s}\""
    assert s == "hello"
    assert s != "hello!"
    t = s
    assert s == t
    t += "!"
    assert t == "hello!"
    assert s == "hello"
    assert str(1) == "1"
    assert str(1.0) == "1.000000"
    u = -5000
    v = str(u)
    assert v == "-5000"
    assert 4 * v == "-5000-5000-5000-5000"
    assert v * 3 == "-5000-5000-5000"
    assert v + v == "-5000-5000"
    assert fie(v) == "-5000-5000"

# ToDo: Uncomment.
test four():
    w: [i32] = []
    print("w:", w)
    assert w.length() == 0
    w.append(5)
    w.append(1)
    print("w:", w)
    assert w.length() == 2
    x: [i32] = [5, 1, 5, 1]
    assert w != x
    # ToDo:
    # assert 2 * w == x
    # assert (2 * w).length() == 4

    l1: [i32] = [1, 2]
    acc: i32 = 0

    for i in l1:
        acc += i

    assert acc == 3

    res = 0

    try:
        res = 1
    finally:
        assert res == 1
        res = 2

    assert res == 2
    vv = 0

    c"""vv = atoi("2");"""

    assert vv == 2

    assert min(-10, 10) == -10
    assert min(-10, 10, -11) == -11
    assert min(100.1, -200.7) == -200.7
    assert max(-10, 10) == 10
    assert max(-10, 10, 11) == 11
    assert max(100.1, -200.7) == 100.1
    mm: i32 = 10
    nn: i32 = 15
    assert min(2 * mm, 21, nn) == 15
    assert max(2 * mm, 21, nn) == 21
    ll: [i32] = [mm, nn]
    assert min(ll) == 10
    assert max(ll) == 15
    assert sum(ll) == 25
    assert abs(-1) == 1
    assert abs(5) == 5
    assert abs(-1.5) == 1.5

    s1 = """a\t
    multi
    line
    string\n"""
    s2 = "a\t\n    multi\n    line\n    string\n"
    assert s1 == s2

test and_or():
    assert (True and False) == False
    assert True or False

test do_not():
    assert not False
    assert not (not (False or True))

test boolean_logic():
    assert (True and (not False) and False) == False
    assert (True and not False and False) == False
    assert True and (not False) or False
    assert (True and (not False)) or False
    assert True and ((not False) or False)

test print():
    print("Hi!")
    print("Hi!", end="!!\n")
    print("Hi!", flush=True)

class InferredFoo:

    a: i32

func inferred_foo() -> i32:
    return -3

test inferred_types_in_assignments():
    value_1 = 1
    value_2 = -1
    value_3 = +1
    value_4 = "a"
    value_5 = True
    value_6 = 6.44
    value_7 = -6.44
    value_8 = InferredFoo(5)
    value_9 = inferred_foo()
    value_10 = InferredFoo(4).a

    assert value_1 == 1
    assert value_2 == -1
    assert value_3 == 1
    assert value_4 == "a"
    assert value_5 == True
    assert value_6 == 6.44
    assert value_7 == -6.44
    assert value_8.a == 5
    assert value_9 == -3
    assert value_10 == 4

test not_inferred_types_in_assignments():
    value_1: i32 = 1
    value_2: i32 = -1
    value_3: i32 = +1
    value_4: string = "a"
    value_5: bool = True
    value_6: f64 = 6.44
    value_7: f64 = -6.44
    value_8: InferredFoo = InferredFoo(5)
    value_9: i32 = inferred_foo()
    value_10: i32 = InferredFoo(4).a

    assert value_1 == 1
    assert value_2 == -1
    assert value_3 == 1
    assert value_4 == "a"
    assert value_5 == True
    assert value_6 == 6.44
    assert value_7 == -6.44
    assert value_8.a == 5
    assert value_9 == -3
    assert value_10 == 4

test inferred_type_list_item_access():
    res = 0
    numbers: [u64] = [1, 2, 3, 4, 5]
    needle = numbers[3]

    for value in numbers:
        if value == needle:
            res = 1
            break

    assert res == 1

func string_foo(value: string) -> string:
    value += " Mouse"

    return value

test string_as_function_parameter():
    assert string_foo("Cat") == "Cat Mouse"

test explicit_integer_type_convertions():
    v1: u8 = 0xff
    v2: i16 = -5

    assert v1 == u8(0x1ff)
    assert v2 == i16(-5)
    assert i32(i16(-1)) == i32(-1)
    assert u8(v2) == u8(0xfb)

test integer_constants():
    v1 = 0x7fffffffffffffff
    v2: i64 = 0x7fffffffffffffff
    v3: i8 = 0x7f
    v4: i8 = -0x80
    v5: u8 = 0
    v6: u8 = 0xff
    v7: u64 = 0xffffffffffffffff

    assert v1 == v2
    assert v3 - 127 - 127 - 1 == v4
    assert v5 + 255 == v6
    assert v7 == 0xffffffffffffffff

test change_integer_type():
    v1 = i8(-1) * i8(u32(5))

    assert v1 == -5

test iterate_over_list_of_integer_literals():
    res = 0

    for i in [5, 1]:
        res += i

    assert res == 6

test iterate_over_list():
    res: u32 = 1
    values: [u32] = [3, 8]

    for value in values:
        res *= value

    assert res == 24

test iterate_over_list_with_condition():
    res: u32 = 1
    values: [u64] = [3, 8, 1]

    for value in slice(values, 1):
        if value == 1:
            res = 2

    assert res == 2

test iterate_over_list_of_strings():
    res = ""
    values: [string] = ["a", "b"]

    for value in values:
        res += value

    assert res == "ab"

test iterate_over_range_1():
    res = 0

    for value in range(10):
        res += value

    assert res == 45

test iterate_over_range_2():
    res = 0

    for value in range(9, 0, -2):
        res += value

    assert res == 25
