# @generic(T)
# trait Iterator:
#
#     func next(self) -> T?:
#         pass

trait Iteratori64:

    func next(self) -> i64?:
        pass

trait IteratorTuplei64i64:

    func next(self) -> (i64, i64)?:
        pass

# iterator empty() -> i64:
#     pass

class Empty(Iteratori64):
    _state: i64

    func __init__(self):
        self._state = 0

    func next(self) -> i64?:
        while True:
            match self._state:
                case 0:
                    return None

func empty() -> Empty:
    return Empty()

test empty():
    it = empty()
    assert it.next() is None

# iterator three_yields() -> i64:
#     yield 1
#     yield 3
#     yield 5

class ThreeYields(Iteratori64):
    _state: i64

    func __init__(self):
        self._state = 0

    func next(self) -> i64?:
        while True:
            match self._state:
                case 0:
                    self._state = 1

                    return 1
                case 1:
                    self._state = 2

                    return 3
                case 2:
                    self._state = 3

                    return 5
                case 3:
                    return None

func three_yields() -> ThreeYields:
    return ThreeYields()

test three_yields():
    it = three_yields()
    assert it.next() == 1
    assert it.next() == 3
    assert it.next() == 5
    assert it.next() is None

# iterator if_else() -> i64:
#     if True:
#         print(1)
#         yield 1
#     else:
#         yield 2
#         print(2)

class IfElse(Iteratori64):
    _state: i64

    func __init__(self):
        self._state = 0

    func next(self) -> i64?:
        while True:
            match self._state:
                case 2:
                    self._state = 1
                case 3:
                    print(2)
                    self._state = 1
                case 0:
                    if True:
                        print(1)
                        self._state = 2

                        return 1
                    else:
                        self._state = 3

                        return 2
                case 1:
                    return None

func if_else() -> IfElse:
    return IfElse()

test if_else():
    it = if_else()
    assert it.next() == 1
    assert it.next() is None

# iterator while_loop() -> i64:
#     i = 0
#
#     while i < 10:
#         yield i
#         i += 1

class WhileLoop(Iteratori64):
    _state: i64
    _i: i64

    func __init__(self):
        self._state = 0

    func next(self) -> i64?:
        while True:
            match self._state:
                case 0:
                    self._i = 0
                    self._state = 2
                case 3:
                    self._i += 1
                    self._state = 2
                case 2:
                    if self._i < 10:
                        self._state = 3

                        return self._i
                    else:
                        self._state = 1
                case 1:
                    return None

func while_loop() -> WhileLoop:
    return WhileLoop()

test while_loop():
    it = while_loop()

    for i in range(10):
        assert it.next() == i

    assert it.next() is None

# iterator while_with_continue_and_break() -> i64:
#     i = 0
#
#     while i < 10:
#         if i == 1:
#             i += 2
#
#             while True:
#                 break
#
#             continue
#         elif i == 4:
#             break
#         else:
#             yield i
#         i += 1

class WhileWithContinueAndBreak(Iteratori64):
    _state: i64
    _i: i64

    func __init__(self):
        self._state = 0

    func next(self) -> i64?:
        while True:
            match self._state:
                case 0:
                    self._i = 0
                    self._state = 2
                case 3:
                    self._i += 1
                    self._state = 2
                case 2:
                    if self._i < 10:
                        if self._i == 1:
                            self._i += 2

                            while True:
                                break

                            self._state = 2
                        elif self._i == 4:
                            self._state = 1
                        else:
                            self._state = 3

                            return self._i
                    else:
                        self._state = 1
                case 1:
                    return None

func while_with_continue_and_break() -> WhileWithContinueAndBreak:
    return WhileWithContinueAndBreak()

test while_with_continue_and_break():
    it = while_with_continue_and_break()
    assert it.next() == 0
    assert it.next() == 3
    assert it.next() is None

# iterator mixed() -> i64:
#     i = 0
#     while i < 10:
#         if i == 5:
#             yield i
#         else:
#             yield 2 * i
#
#         i += 1
#
#     if True:
#         print(1 + 2)
#     elif False:
#         i = 1
#         while i != 1:
#             yield 5 - i
#     else:
#         print(1 - 1)

class Mixed(Iteratori64):
    _state: i64
    _i: i64

    func __init__(self):
        self._state = 0

    func next(self) -> i64?:
        while True:
            match self._state:
                case 0:
                    self._i = 0
                    self._state = 2
                case 4:
                    self._state = 3
                case 5:
                    self._state = 3
                case 3:
                    self._i += 1
                    self._state = 2
                case 2:
                    if self._i < 10:
                        if self._i == 5:
                            self._state = 4

                            return self._i
                        else:
                            self._state = 5

                            return 2 * self._i
                    else:
                        self._state = 1
                case 10:
                    self._state = 9
                case 9:
                    if self._i != 1:
                        self._state = 10

                        return 5 - self._i
                    else:
                        self._state = 8
                case 8:
                    self._state = 7
                case 7:
                    self._state = 6
                case 1:
                    if True:
                        print(1 + 2)
                        self._state = 6
                    elif False:
                        i = 1
                        self._state = 9
                    else:
                        print(1 - 1)
                        self._state = 7
                case 6:
                    return None

func mixed() -> Mixed:
    return Mixed()

test mixed():
    it = mixed()
    assert it.next() == 0
    assert it.next() == 2
    assert it.next() == 4
    assert it.next() == 6
    assert it.next() == 8
    assert it.next() == 5
    assert it.next() == 12
    assert it.next() == 14
    assert it.next() == 16
    assert it.next() == 18
    assert it.next() is None

# iterator fibonaccis(count: i64) -> (i64, i64):
#     curr = 0
#     next = 1
#     i = 0
#
#     while i < count:
#         yield (i, curr)
#         yield (i, curr)
#         temp = curr
#         curr = next
#         next += temp
#         i += 1

class Fibonaccis(IteratorTuplei64i64):
    _state: i64
    _count: i64
    _curr: i64
    _next: i64
    _i: i64

    func __init__(self, count: i64):
        self._state = 0
        self._count = count

    func next(self) -> (i64, i64)?:
        while True:
            match self._state:
                case 0:
                    self._curr = 0
                    self._next = 1
                    self._i = 0
                    self._state = 2
                case 3:
                    self._state = 4

                    return (self._i, self._curr)
                case 4:
                    temp = self._curr
                    self._curr = self._next
                    self._next += temp
                    self._i += 1
                    self._state = 2
                case 2:
                    if self._i < self._count:
                        self._state = 3

                        return (self._i, self._curr)
                    else:
                        self._state = 1
                case 1:
                    return None

func  fibonaccis(count: i64) -> Fibonaccis:
    return Fibonaccis(count)

test fibonaccis():
    it = fibonaccis(7)
    assert it.next() == (0, 0)
    assert it.next() == (0, 0)
    assert it.next() == (1, 1)
    assert it.next() == (1, 1)
    assert it.next() == (2, 1)
    assert it.next() == (2, 1)
    assert it.next() == (3, 2)
    assert it.next() == (3, 2)
    assert it.next() == (4, 3)
    assert it.next() == (4, 3)
    assert it.next() == (5, 5)
    assert it.next() == (5, 5)
    assert it.next() == (6, 8)
    assert it.next() == (6, 8)
    assert it.next() is None

# iterator one_and_two() -> i64:
#     yield 3
#     yield 5

class OneAndTwo(Iteratori64):
    _state: i64

    func __init__(self):
        self._state = 0

    func next(self) -> i64?:
        while True:
            match self._state:
                case 0:
                    self._state = 1

                    return 3
                case 1:
                    self._state = 2

                    return 5
                case 2:
                    return None

# iterator for_loop_over_other_iterator() -> i64:
#     for i in one_and_two():
#         yield 2 * i

class ForLoopOverOtherIterator(Iteratori64):
    _state: i64
    _for: OneAndTwo?

    func __init__(self):
        self._state = 0

    func next(self) -> i64?:
        while True:
            match self._state:
                case 0:
                    self._state = 1
                    self._for = OneAndTwo()
                case 1:
                    i = self._for.next()

                    if i is None:
                        self._state = 2
                    else:
                        return 2 * i
                case 2:
                    return None

func for_loop_over_other_iterator() -> ForLoopOverOtherIterator:
    return ForLoopOverOtherIterator()

test for_loop_over_other_iterator():
    it = for_loop_over_other_iterator()
    assert it.next() == 6
    assert it.next() == 10
    assert it.next() is None

# iterator two_values() -> i64:
#     yield 2
#     yield 1

class TwoValues(Iteratori64):
    _state: i64

    func __init__(self):
        self._state = 0

    func next(self) -> i64?:
        while True:
            match self._state:
                case 0:
                    self._state = 1

                    return 2
                case 1:
                    self._state = 2

                    return 1
                case 2:
                    return None

func next_value(it: Iteratori64) -> i64?:
    return it.next()

func two_values() -> TwoValues:
    return TwoValues()

test iterator_parameter():
    it = two_values()
    assert next_value(it) == 2
    assert next_value(it) == 1
    assert next_value(it) is None

class MyIterator(Iteratori64):
    _a: i64
    _b: i64
    _c: i64
    _next_letter: char

    func __init__(self):
        self._a = 5
        self._b = 3
        self._c = 1
        self._next_letter = 'a'

    func next(self) -> i64?:
        match self._next_letter:
            case 'a':
                self._next_letter = 'b'

                return self._a
            case 'b':
                self._next_letter = 'c'

                return self._b
            case 'c':
                self._next_letter = ''

                return self._c
            case _:
                return None

func my_iterator() ->  MyIterator:
    return  MyIterator()

test my_iterator():
    it = MyIterator()
    assert it.next() == 5
    assert it.next() == 3
    assert it.next() == 1
    assert it.next() is None

# class Method:
#
#     iterator bar(self) -> i64:
#         yield 1
#         yield 0

class MethodBar(Iteratori64):
    _state: i64

    func __init__(self):
        self._state = 0

    func next(self) -> i64?:
        while True:
            match self._state:
                case 0:
                    self._state = 1

                    return 1
                case 1:
                    self._state = 2

                    return 0
                case 2:
                    return None

class Method:

    func bar(self) -> MethodBar:
        return MethodBar()

test method():
    method = Method()
    it = method.bar()
    assert it.next() == 1
    assert it.next() == 0
    assert it.next() is None
