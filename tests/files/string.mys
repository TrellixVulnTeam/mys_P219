def get() -> (string, string):
    return "Hello", "!"

@test
def test_strings():
    foo, bar = get()

    # += creates a new string
    foo2 = foo
    foo += bar
    assert foo == "Hello!"
    assert foo2 != foo

@test
def test_string_asserts():
    a = "1"
    b = "1"
    assert a is a
    assert a is not b
    assert None is not a
    assert b is not None

@test
def test_string_compare():
    a = "1"
    b = "1"

    if not (a is a):
        assert False

    if not (a is not b):
        assert False

    if not (None is not a):
        assert False

    if not (b is not None):
        assert False

    if "" is None:
        assert False

    assert "1" < "2"
    assert "12" < "3"
    assert "3" < "32"
    assert "3" > "123"
    assert "abc" <= "abc"
    assert "abc" <= "abcd"
    assert "abc" >= "abc"
    assert "abcd" >= "abc"

@test
def test_string_get_char():
    a = "cactus"

    assert a[0] == 'c'
    assert a[4] == 'u'
    assert a[5] == 's'

@test
def test_string_str():
    v: string = None
    assert str(v) == "None"
    assert str("hi") == "\"hi\""

@test
def test_iterate_over_string():
    v: [char] = []
    country = "sweden"

    for ch in country:
        v.append(ch)

    assert v == ['s', 'w', 'e', 'd', 'e', 'n']

@test
def test_add_char_to_string():
    country = "swede"
    country += 'n'

    assert country == "sweden"

@test
def test_unicode_string():
    assert len(string("\u03b1")) == 1
    assert len("\u03b1") == 1
    s = "\u2800\U00010924"
    assert s[0] == '\u2800'
    assert s[1] == '\U00010924'
    assert "\U0001f60a" == "😊"
    assert "\N{SMILING FACE WITH SMILING EYES}" == "😊"

@test
def test_char_to_string():
    assert string('1') == "1"
    assert '\u03b1' == char(945)
    assert string('\u03b1') == "\u03b1"

@test
def test_string_to_utf8():
    s = "Hello!"
    assert s.to_utf8() == b"Hello!"
    s = "士师」一词，ctext的语译是司法部长。请问有何根"
    assert s.to_utf8() == (
        b"\xe5\xa3\xab\xe5\xb8\x88\xe3\x80\x8d\xe4\xb8\x80\xe8\xaf\x8d\xef"
        b"\xbc\x8c\x63\x74\x65\x78\x74\xe7\x9a\x84\xe8\xaf\xad\xe8\xaf\x91"
        b"\xe6\x98\xaf\xe5\x8f\xb8\xe6\xb3\x95\xe9\x83\xa8\xe9\x95\xbf\xe3"
        b"\x80\x82\xe8\xaf\xb7\xe9\x97\xae\xe6\x9c\x89\xe4\xbd\x95\xe6\xa0"
        b"\xb9")

@test
def test_string_from_utf8():
    data: bytes = None
    assert string(data) is None
    assert string(b"Hello!") == "Hello!"
    assert string(
        b"\xe5\xa3\xab\xe5\xb8\x88\xe3\x80\x8d\xe4\xb8\x80\xe8\xaf\x8d\xef"
        b"\xbc\x8c\x63\x74\x65\x78\x74\xe7\x9a\x84\xe8\xaf\xad\xe8\xaf\x91"
        b"\xe6\x98\xaf\xe5\x8f\xb8\xe6\xb3\x95\xe9\x83\xa8\xe9\x95\xbf\xe3"
        b"\x80\x82\xe8\xaf\xb7\xe9\x97\xae\xe6\x9c\x89\xe4\xbd\x95\xe6\xa0"
        b"\xb9") == "士师」一词，ctext的语译是司法部长。请问有何根"
    assert string(b"\x4c\x69\x6e\x6b\xc3\xb6\x70\x69\x6e\x67") == "Linköping"

@test
def test_string_from_utf8_with_offset():
    data: bytes = None
    assert string(data, 0, 1) is None
    assert string(b"Hello!", 0, 5) == "Hello"
    assert string(b"Hello!", 1, 3) == "el"
    assert string(b"Hello!", 10, 20) == ""
    assert string(
        b"\xe5\xa3\xab\xe5\xb8\x88\xe3\x80\x8d\xe4\xb8\x80\xe8\xaf\x8d\xef"
        b"\xbc\x8c\x63\x74\x65\x78\x74\xe7\x9a\x84\xe8\xaf\xad\xe8\xaf\x91"
        b"\xe6\x98\xaf\xe5\x8f\xb8\xe6\xb3\x95\xe9\x83\xa8\xe9\x95\xbf\xe3"
        b"\x80\x82\xe8\xaf\xb7\xe9\x97\xae\xe6\x9c\x89\xe4\xbd\x95\xe6\xa0"
        b"\xb9", 0, 500) == "士师」一词，ctext的语译是司法部长。请问有何根"
    assert string(b"\x4c\x69\x6e\x6b\xc3\xb6\x70\x69\x6e\x67", 0, 10) == "Linköping"

RE_PP: regex = re"(\d+)\.(\d+)\.(\d+)"

@test
def test_string_regex():
    pp = re"(\d+)\.(\d+)\.(\d+)"
    mo = "3.1.2".match(pp)
    assert mo.group(1) == "3"
    assert mo.group(2) == "1"
    assert mo.group(3) == "2"

    pp1 = regex(r"(\d+)\.(\d+)\.(\d+)", "")
    mo1 = "3.1.2".match(pp)
    assert mo1.group(1) == "3"
    assert mo1.group(2) == "1"
    assert mo1.group(3) == "2"

    mo2 = "3.1.2".match(RE_PP)
    assert mo2.group(1) == "3"
    assert mo2.group(2) == "1"
    assert mo2.group(3) == "2"

    #mo = "3.1.2".match(pp, 2, 3)
    #assert mo.group(1) == "2"

    mz = re"^\w+.$"
    assert mz.match("αβγ😊") is not None

    dotall = re"a.b"s
    assert dotall.match("""a
b""") is not None

    multi = re"^b"m
    assert multi.match("""a
b""") is not None

    l = "a  b  c".split(re"\s+")
    assert l == ["a", "b", "c"]

    l = "ab  bc  \tcd".split()
    assert l == ["ab", "bc", "cd"]

    assert "0ab3BD9".split(re"[a-f]+"i) == ["0", "3", "9"]

    mo = "a.b.c".match(pp)
    assert mo is None

    x = re"(\d+) years"
    mo = "I am 6 years old.".match(x)
    assert mo.group(0) == "6 years"

    mo1 = "I am 6 years old.".match(x)
    assert mo1.group(0) == "6 years"

    mo2 = mo1
    assert mo2.group(0) == "6 years"

    mo = "I am 6 years old.".match(re"(\d+) years")
    assert mo.group(0) == "6 years"
    assert mo.group(1) == "6"

    re = re"(\d+) years"
    mo1 = "I am 736 years old.".match(re)
    assert mo1.group(1) == "736"

    mo = "I am 6 years old.".match(re"(\d+) YEARS"i)
    assert mo.group(1) == "6"
    assert mo.groups() == ["6"]
    gd: {string: string} = mo.group_dict()
    assert gd == {}

    mo = "I am 36 years old.".match(re"""
        (?P<age>\d+)
        \s*
        (?P<unit>\w+)
        \s*
        old"""x)
    assert mo.group("age") == "36"
    assert mo.begin("age") == 5
    assert mo.end("age") == 7
    assert mo.span("age") == (5, 7)
    assert mo.span(0) == (5, 17)
    assert mo.span(1) == (5, 7)
    assert mo.span(2) == (8, 13)
    assert mo.group(1) == "36"
    assert mo.begin(1) == 5
    assert mo.end(1) == 7
    assert mo.span(1) == (5, 7)
    gd = mo.group_dict()
    assert gd == {"age": "36", "unit": "years"}
    assert mo.group(1) == "36"
    assert mo.group(2) == "years"
    assert mo.groups() == ["36", "years"]

    zx = "I want more AppLEs.".replace(re"apples"i, "bananas")
    assert zx == "I want more bananas."

    mo = "123".match(re"")
    assert mo.group(0) == ""

    try:
        message = ""
        "123".match(re"(")
    except ValueError as error:
        message = str(error)

    assert message == (
        "ValueError(message=\"missing closing parenthesis at offset 1\")")

@test
def test_string_upper():
    s = "Hello!"
    assert s.upper() == "HELLO!"

    s = "åäö"
    assert s.upper() == "ÅÄÖ"

    s = "ß"
    assert s.upper() == "SS"

    assert "ΤΆΧΙΣΤΗ αλώπηξ βαφής ψημένη γη".upper() == "ΤΆΧΙΣΤΗ ΑΛΏΠΗΞ ΒΑΦΉΣ ΨΗΜΈΝΗ ΓΗ"

@test
def test_string_lower():
    s = "Hello!"
    assert s.lower() == "hello!"

    assert "ß".lower() == "ß"

    # special case for final sigma
    assert "ΒΑΦΉΣ".lower() == "βαφής"
    assert "Σ".lower() == "σ"
    assert "Σ Β".lower() == "σ β"
    assert "ΣΒΑΦΉ".lower() == "σβαφή"
    assert "ΤΆΧΙΣΤΗ ΑΛΏΠΗΞ ΒΑΦΉΣ ΨΗΜΈΝΗ ΓΗ".lower() == "τάχιστη αλώπηξ βαφής ψημένη γη"

@test
def test_string_casefold():
    s = "ß"
    assert s.casefold() == "ss"

    assert "ß".casefold() == "ss"

    s = "ÅÄÖ"
    assert s.casefold() == "åäö"

@test
def test_string_capitalize():
    s = "ﬁnnish"
    assert s.capitalize() == "Finnish"

    assert "ǄEMPER".capitalize() == "ǅemper"
    assert "hİ".capitalize() == "Hi̇"
    assert "AͅΣ".capitalize() == "Aͅς"

@test
def test_string_multiply():
    assert "a" * 3 == "aaa"
    assert 3 * "b" == "bbb"

    a = "ab"
    a *= 3
    assert a == "ababab"

@test
def test_string_is():
    assert "a".is_alpha()
    assert not "a1".is_alpha()
    assert "α".is_alpha()
    assert not "*".is_alpha()
    assert not "".is_alpha()

    assert "3".is_digit()
    assert "٣".is_digit()
    assert not "a1".is_digit()
    assert not "½".is_digit()
    assert not "α٣".is_digit()
    assert not "x".is_digit()
    assert not "".is_digit()

    assert " ".is_space()
    assert "\t".is_space()
    assert not "3".is_space()
    assert not "".is_space()

    assert "½".is_numeric()
    assert "123".is_numeric()
    assert not "xyz1".is_numeric()
    assert not "".is_numeric()

    assert not "".is_upper()
    assert not " ".is_upper()
    assert not "Hello!".is_upper()
    assert "HELLO!".is_upper()
    assert not "åäö".is_upper()
    assert "ÅÄÖ".is_upper()
    assert not "ß".is_upper()
    assert "SS".is_upper()
    assert not "ΤΆΧΙΣΤΗ αλώπηξ βαφής ψημένη γη".is_upper()
    assert "ΤΆΧΙΣΤΗ ΑΛΏΠΗΞ ΒΑΦΉΣ ΨΗΜΈΝΗ ΓΗ".is_upper()

    assert not "".is_lower()
    assert not " ".is_lower()
    assert not "Hello!".is_lower()
    assert "hello!".is_lower()
    assert "ß".is_lower()
    assert not "ΒΑΦΉΣ".is_lower()
    assert "βαφής".is_lower()
    assert not "Σ".is_lower()
    assert "σ".is_lower()
    assert not "Σ Β".is_lower()
    assert "σ β".is_lower()
    assert not "ΣΒΑΦΉ".is_lower()
    assert "σβαφή".is_lower()
    assert not "ΤΆΧΙΣΤΗ ΑΛΏΠΗΞ ΒΑΦΉΣ ΨΗΜΈΝΗ ΓΗ".is_lower()
    assert "τάχιστη αλώπηξ βαφής ψημένη γη".is_lower()

@test
def test_string_join():
    x = "z".join(["a"])
    assert x == "a"

    x = ",".join(["a", "b"])
    assert x == "a,b"

    assert " ".join(["foo", "baz"]) == "foo baz"

@test
def test_string_split():
    x = "foobarbaz"
    assert x.split("bar") == ["foo", "baz"]
    assert "/:/home:/usr/local/bin".split(":") == ["/", "/home", "/usr/local/bin"]
    assert "123231".split("23") == ["1", "", "1"]
    assert "123".split(None) == ["123"]

    try:
        message = ""
        "123".split("")
    except ValueError as error:
        message = str(error)

    assert message == "ValueError(message=\"empty separator\")"

    assert "123".split("123") == ["", ""]

    # ToDo: should be compile error
    # "123".split(1)

    assert "123231".split("1") == ["", "2323", ""]
    assert "11232311".split("1") == ["", "", "2323", "", ""]
    assert "21112323121".split("21") == ["", "1123231", ""]

    assert "a:b:/home/erik/bin".split(":") == ["a", "b", "/home/erik/bin"]

@test
def test_string_find():
    assert "".find('x') == -1
    assert "x".find('x', 1, 1) == -1
    assert "x".find('x', 2, 1) == -1

    x = "find t or t"
    assert x.find('t', 0, 6) == 5
    assert x.find("ind", 0, 6) == 1
    assert x.find('t', 0, 5) == -1

    assert x.find('q', 0) == -1
    assert x.find('t', 6) == 10
    assert x.find('t', 10) == 10
    assert x.find('t', 11) == -1
    assert x.find('t', -1) == 10
    assert x.find('t', -100) == 5
    assert x.find('t', 0, -5) == 5
    assert x.find('t', 0, -6) == -1

    assert x.find('t') == 5
    assert x.find("t") == 5
    assert x.find("ind") == 1

    assert "".find_reverse('t') == -1
    assert x.find_reverse('t', 0, 6) == 5
    assert x.find_reverse('t', 4, 6) == 5
    assert x.find_reverse('t', 8) == 10
    assert x.find_reverse('t') == 10
    assert x.find_reverse("t") == 10

@test
def test_string_partition():
    x = "find t or tea"
    assert x.partition('t') == ("find ", "t", " or tea")
    assert x.partition('q') == ("find t or tea", "", "")

    assert x.partition("or") == ("find t ", "or", " tea")
    assert x.partition("bor") == ("find t or tea", "", "")

    assert "123".partition("123") == ("", "123", "")
    assert "".partition("123") == ("", "", "")

    try:
        message = ""
        "123".partition(None)
    except ValueError as error:
        message = str(error)

    assert message == "ValueError(message=\"separator is None\")"

@test
def test_string_strip():
    x = "   example  \t  "
    assert x.strip() == "example"

    x = "   example  \t  "
    assert x.strip_left() == "example  \t  "

    x = "   example  \t  "
    assert x.strip_right() == "   example"

    x = "www.example.com"
    assert x.strip("cmowz.") == "example"

    x = "www.example.com"
    assert x.strip_left("cmowz.") == "example.com"

    x = "www.example.com"
    assert x.strip_right("cmowz.") == "www.example"

    z = x.strip_right("cmowz.")
    assert z == "www.example"
    z = z.strip_left("cmowz.")
    assert z == "example"
    z = z.strip("e")
    assert z == "xampl"

    x = "foo"
    assert x.strip_right("fo") == ""

    x = "foo"
    assert x.strip_left("fo") == ""

    x = "foo"
    assert x.strip("fo") == ""

    assert "123".strip(None) == "123"
    assert " 123 ".strip("") == " 123 "

@test
def test_string_replace():
    x = "replace"
    assert x.replace('r', 'x') == "xeplace"

    x = "replace"
    assert x.replace("re", "foo") == "fooplace"

    x = "replace"
    assert x.replace("pl", "") == "reace"

    x = "replace"
    assert x.replace("pl", "plplpl") == "replplplace"

@test
def test_string_to_integer():
    assert i32("-12") == -12
    assert u32("12") == 12

@test
def test_string_to_float():
    assert f32("12345.25") == 12345.25
    assert f32("0123456789.5") == 123456789.5
    assert f32("01234567.5") != 1234567.25
    assert f64("01234567.5") != 1234567.25
    assert f64("0123456789.5") == 123456789.5
    assert f64("-0123456789.5") == -123456789.5
    assert f64("1") == 1.0
    assert f64("-2") == -2.0
    assert f64("1e5") == 100000.0
    assert f64("1E-3") <= 0.0011
    assert f64("1E-3") >= 0.0009
    assert f64("-1e+3") == -1000.0
    assert f64("2.5e2") == 250.0
    assert f64("2.e2") == 200.0
    assert f64(".8") == 0.8
    assert f64("8.") == 8.0

    try:
        ok = False
        f64("")
    except ValueError:
        ok = True

    assert ok

    try:
        ok = False
        f64("-")
    except ValueError:
        ok = True

    assert ok

    try:
        ok = False
        f64("x")
    except ValueError:
        ok = True

    assert ok

@test
def test_string_starts_with():
    s = "hello"

    assert s.starts_with("")
    assert s.starts_with("h")
    assert s.starts_with("hell")
    assert s.starts_with("hello")
    assert not s.starts_with("hello!")
    assert not s.starts_with("e")

@test
def test_string_ends_with():
    s = "hello"

    assert s.ends_with("")
    assert s.ends_with("o")
    assert s.ends_with("ello")
    assert s.ends_with("hello")
    assert not s.ends_with("hello!")
    assert not s.ends_with("e")

@test
def test_string_slice():
    a = "cactus"

    assert a[1:3:1] == "ac"
    assert a[-2:6:] == "us"
    assert a[-2:6] == "us"

    assert a[:6:2] == "ccu"
    x = 1
    assert a[:6:x+x] == "ccu"

    assert a[100:-100:-1] == "sutcac"
    assert a[5:-100:-1] == "sutcac"
    assert a[5:-7:-1] == "sutcac"
    assert a[-1:-7:-1] == "sutcac"
    assert a[4:0:-1] == "utca"
    assert a[4:-7:-1] == "utcac"
    assert a[4:-6:-1] == "utca"
    assert a[4:0:-1] == "utca"

    assert a[:] == "cactus"
    assert a[::] == "cactus"
    assert a[1::] == "actus"
    assert a[1:] == "actus"
    assert a[1::1] == "actus"

    assert a[::-1] == "sutcac"
    assert a[::-2] == "sta"

    assert a == "cactus"

@test
def test_negative_string_index():
    values = "0246"

    assert values[-1] == '6'
    assert values[-2] == '4'
    assert values[-4] == '0'

@test
def test_char_in():
    assert 'a' in "a"
    assert 'b' in "abba"
    assert 'c' not in "abba"

@test
def test_string_in():
    assert "a" in "a"
    assert "b" in "abba"
    assert "c" not in "abba"
    assert "ba" in "abba"

def f1(s: string) -> regex:
    return regex(s, "i")

def f2(r: regex) -> regexmatch:
    return r.match("xyz")

@test
def test_regex_function():
    assert f1("X").match("xyz").group(0) == "x"
    assert f2(re"x").group(0) == "x"

@test
def test_regex_empty():
    line = ""
    mo = line.match(re"\d")
    assert mo is None

    mo = line.match(re"")
    assert len(mo.groups()) == 0

    x = line.replace(re"", "x")
    assert x == "x"

    assert "foo".replace(re"", "x") == "xfxoxox"

    empty_re = re""
    assert empty_re.match("xxx") is not None
    assert empty_re.match("") is not None

    empty_re2 = regex("", "")
    assert empty_re2.match("") is not None

@test
def test_regex_groups_1():
    mo = "a".match(re"(a)|(b(c))")
    assert mo.group(0) == "a"
    assert mo.group(1) == "a"
    assert mo.group(2) is None
    assert mo.group(3) is None
    assert len(mo.groups()) == 3

@test
def test_regex_groups_2():
    mo = "bc".match(re"(a)|(b(c))")
    assert mo.group(0) == "bc"
    assert mo.group(1) is None
    assert mo.group(2) == "bc"
    assert mo.group(3) == "c"
    assert len(mo.groups()) == 3

@test
def test_list_comprehension():
    assert [ch for ch in "ab"] == ['a', 'b']
