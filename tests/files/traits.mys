@trait
class Base:

    def bar(self, value: i32) -> bool:
        "A docstring."

@trait
class Base2:

    def fie(self):
        pass

class Foo(Base):

    def bar(self, value: i32) -> bool:
        return True

class Bar(Base, Base2):

    def bar(self, value: i32) -> bool:
        return False

    def fie(self):
        print()

def trait_call(base: Base) -> bool:
    return base.bar(1)

@test
def test_implement_trait_in_class():
    foo = Foo()
    bar = Bar()
    assert foo.bar(1)
    assert not bar.bar(1)
    assert trait_call(Foo())
    assert not trait_call(Bar())
    bar.fie()

@trait
class TraitStr:
    pass

class TraitFoo(TraitStr):
    a: i32

class TraitBar(TraitStr):
    b: string

def trait_str(v: TraitStr) -> string:
    return str(v)

@test
def test_trait_str():
    assert trait_str(TraitFoo(5)) == "TraitFoo(a=5)"
    assert trait_str(TraitBar("Kalle")) == "TraitBar(b=\"Kalle\")"

@trait
class BaseWithMethodBody:

    def foo(self) -> i64:
        return 3

class FooWithMethodBody(BaseWithMethodBody):
    pass

class BarWithMethodBody(BaseWithMethodBody):

    def foo(self) -> i64:
        return -1

def trait_with_method_body(v: BaseWithMethodBody) -> i64:
    return v.foo()

@test
def test_trait_with_method_body():
    assert trait_with_method_body(FooWithMethodBody()) == 3
    assert trait_with_method_body(BarWithMethodBody()) == -1
    assert FooWithMethodBody().foo() == 3
    assert BarWithMethodBody().foo() == -1

class Tape:
    pass

@trait
class Op:

    def execute(self, tape: Tape):
        pass

class Inc(Op):
    val: i32

    def execute(self, tape: Tape):
        pass

def run(op: Op, tape: Tape):
    op.execute(tape)

@test
def test_call_trait_method_with_class_parameter():
    run(Inc(1), Tape())

@trait
class BaseMethods:

    def only_docstring(self) -> bool:
        "A docstring."

    def only_pass(self) -> bool:
        pass

    def many_pass(self) -> bool:
        pass
        pass

    def with_body(self) -> bool:
        return True

    def with_docstring_and_body(self) -> bool:
        "Doc!"

        return False

    def with_long_body_no_docstring(self) -> bool:
        v = True

        return v

class FooMethods(BaseMethods):

    def only_docstring(self) -> bool:
        return True

    def only_pass(self) -> bool:
        return False

    def many_pass(self) -> bool:
        return True

@test
def test_methods():
    foo = FooMethods()

    assert foo.only_docstring()
    assert not foo.only_pass()
    assert foo.many_pass()
    assert foo.with_body()
    assert not foo.with_docstring_and_body()
    assert foo.with_long_body_no_docstring()

class MoreTape:
    pass

@trait
class MoreBase:

    def execute(self, tape: MoreTape):
        pass

class MoreFoo(MoreBase):
    x: MoreBase

    def execute(self, tape: MoreTape):
        pass

class MoreBar:
    x: [MoreBase]

    def execute(self, tape: MoreTape):
        pass

@test
def test_more_traits():
    foo = MoreFoo(None)
    bar = MoreBar([foo])

    assert foo.x is None
    assert len(bar.x) == 1

# ToDo
# @trait
# class TraitReturnSelf:
#
#     def foo(self) -> TraitReturnSelf:
#         return self
#
# class FooReturnSelf(TraitReturnSelf):
#     pass
#
# @test
# def test_trait_return_self():
#     foo = FooReturnSelf()
#     assert foo.foo() is foo

@trait
class Comp:

    def value(self) -> string:
        pass

    def body(self) -> string:
        pass

    def generate(self) -> string:
        return f"value: {self.value()}, body: {self.body()}"

# ToDo
# Generate code for the trait, and specialize it in the class that
# implements it.
#
# {class_name}::generate()
# {{
#     return String("value: ") + String(this->value()) + String(", body: ") + String(this->body());
# }}
#

class ListComp(Comp):

    def value(self) -> string:
        return "[1, 2]"

    def body(self) -> string:
        return "ast.List()"

class DictComp(Comp):

    def value(self) -> string:
        return "{1: 2}"

    def body(self) -> string:
        return "ast.Dict()"

@test
def test_list_comp():
    assert ListComp().generate() == "value: [1, 2], body: ast.List()"

@test
def test_dict_comp():
    assert DictComp().generate() == "value: {1: 2}, body: ast.Dict()"

@trait
class ParamBase:

    def foo(self) -> i64:
        pass

class ParamFoo(ParamBase):

    def foo(self) -> i64:
        return 5

def trait_to_class_parameter(v: ParamFoo) -> i64:
    return v.foo()

def trait_to_class_parameter_1(v: ParamBase) -> i64:
    return trait_to_class_parameter(v)

@test
def test_trait_to_class_parameter():
    assert trait_to_class_parameter_1(ParamFoo()) == 5

@trait
class TupleBase:

    def foo(self) -> i64:
        pass

class TupleFoo(TupleBase):

    def foo(self) -> i64:
        return 5

def trait_in_tuple() -> (i64, TupleBase):
    return (1, TupleFoo())

@test
def test_trait_in_tuple():
    a, b = trait_in_tuple()
    assert a == 1
    assert b.foo() == 5
