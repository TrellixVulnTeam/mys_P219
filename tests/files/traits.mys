trait Base:

    func bar(self, value: i32) -> bool:
        "A docstring."

trait Base2:

    func fie(self):
        pass

class Foo(Base):

    func bar(self, value: i32) -> bool:
        return True

class Bar(Base, Base2):

    func bar(self, value: i32) -> bool:
        return False

    func fie(self):
        print()

func trait_call(base: Base) -> bool:
    return base.bar(1)

test implement_trait_in_class():
    foo = Foo()
    bar = Bar()
    assert foo.bar(1)
    assert not bar.bar(1)
    assert trait_call(Foo())
    assert not trait_call(Bar())
    bar.fie()

trait TraitStr:
    pass

class TraitFoo(TraitStr):
    a: i32

class TraitBar(TraitStr):
    b: string

func trait_str(v: TraitStr) -> string:
    return str(v)

test trait_str():
    assert trait_str(TraitFoo(5)) == "TraitFoo(a=5)"
    assert trait_str(TraitBar("Kalle")) == "TraitBar(b=\"Kalle\")"

trait BaseWithMethodBody:

    func foo(self) -> i64:
        return 3

class FooWithMethodBody(BaseWithMethodBody):
    pass

class BarWithMethodBody(BaseWithMethodBody):

    func foo(self) -> i64:
        return -1

func trait_with_method_body(v: BaseWithMethodBody) -> i64:
    return v.foo()

test trait_with_method_body():
    assert trait_with_method_body(FooWithMethodBody()) == 3
    assert trait_with_method_body(BarWithMethodBody()) == -1
    assert FooWithMethodBody().foo() == 3
    assert BarWithMethodBody().foo() == -1

class Tape:
    pass

trait Op:

    func execute(self, tape: Tape):
        pass

class Inc(Op):
    val: i32

    func execute(self, tape: Tape):
        pass

func run(op: Op, tape: Tape):
    op.execute(tape)

test call_trait_method_with_class_parameter():
    run(Inc(1), Tape())

trait BaseMethods:

    func only_docstring(self) -> bool:
        "A docstring."

    func only_pass(self) -> bool:
        pass

    func many_pass(self) -> bool:
        pass
        pass

    func with_body(self) -> bool:
        return True

    func with_docstring_and_body(self) -> bool:
        "Doc!"

        return False

    func with_long_body_no_docstring(self) -> bool:
        v = True

        return v

class FooMethods(BaseMethods):

    func only_docstring(self) -> bool:
        return True

    func only_pass(self) -> bool:
        return False

    func many_pass(self) -> bool:
        return True

test methods():
    foo = FooMethods()

    assert foo.only_docstring()
    assert not foo.only_pass()
    assert foo.many_pass()
    assert foo.with_body()
    assert not foo.with_docstring_and_body()
    assert foo.with_long_body_no_docstring()

class MoreTape:
    pass

trait MoreBase:

    func execute(self, tape: MoreTape):
        pass

class MoreFoo(MoreBase):
    x: MoreBase?

    func execute(self, tape: MoreTape):
        pass

class MoreBar:
    x: [MoreBase]

    func execute(self, tape: MoreTape):
        pass

test more_traits():
    foo = MoreFoo(None)
    bar = MoreBar([foo])

    assert foo.x is None
    assert bar.x.length() == 1

# ToDo
# trait TraitReturnSelf:
#
#     func foo(self) -> TraitReturnSelf:
#         return self
#
# class FooReturnSelf(TraitReturnSelf):
#     pass
#
# test trait_return_self():
#     foo = FooReturnSelf()
#     assert foo.foo() is foo

trait Comp:

    func value(self) -> string:
        pass

    func body(self) -> string:
        pass

    func generate(self) -> string:
        return f"value: {self.value()}, body: {self.body()}"

# ToDo
# Generate code for the trait, and specialize it in the class that
# implements it.
#
# {class_name}::generate()
# {{
#     return String("value: ") + String(this->value()) + String(", body: ") + String(this->body());
# }}
#

class ListComp(Comp):

    func value(self) -> string:
        return "[1, 2]"

    func body(self) -> string:
        return "ast.List()"

class DictComp(Comp):

    func value(self) -> string:
        return "{1: 2}"

    func body(self) -> string:
        return "ast.Dict()"

test list_comp():
    assert ListComp().generate() == "value: [1, 2], body: ast.List()"

test dict_comp():
    assert DictComp().generate() == "value: {1: 2}, body: ast.Dict()"

trait ParamBase:

    func foo(self) -> i64:
        pass

class ParamFoo(ParamBase):

    func foo(self) -> i64:
        return 5

func trait_to_class_parameter(v: ParamFoo) -> i64:
    return v.foo()

func trait_to_class_parameter_1(v: ParamBase) -> i64:
    return trait_to_class_parameter(v)

test trait_to_class_parameter():
    assert trait_to_class_parameter_1(ParamFoo()) == 5

trait TupleBase:

    func foo(self) -> i64:
        pass

class TupleFoo(TupleBase):

    func foo(self) -> i64:
        return 5

func trait_in_tuple() -> (i64, TupleBase):
    return (1, TupleFoo())

test trait_in_tuple():
    a, b = trait_in_tuple()
    assert a == 1
    assert b.foo() == 5

trait Cpp:

    func float(self) -> f64:
        return 0.0

    func bool(self) -> bool:
        return False

class CppC(Cpp):

    func float(self) -> f64:
        return 1.0

test cpp():
    assert CppC().float() == 1.0
    assert not CppC().bool()

trait VariableInBranchesBase:
    pass

class VariableInBranchesFoo(VariableInBranchesBase):
    pass

func variable_in_branches_foo() -> VariableInBranchesBase:
    return VariableInBranchesFoo()

test variable_in_branches():
    if True:
        variable = variable_in_branches_foo()
    else:
        variable = VariableInBranchesFoo()

    print(variable)

    try:
        variable_2 = variable_in_branches_foo()
    except Error:
        variable_2 = VariableInBranchesFoo()

    print(variable_2)
