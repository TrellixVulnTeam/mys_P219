class Foo:

    func bar(self) -> string:
        return "hello"

func foo() -> bool:
    return False

func foo(a: i64) -> i64:
    return 2 * a

func foo(a: i32) -> i32:
    return 4 * a

func foo(a: string, b: bool) -> string:
    return a + str(b)

func foo(a: bool, b: bool) -> string:
    return str(a) + " " + str(b)

func foo(a: Foo) -> Foo:
    return a

@test
func test_overload_foo():
    assert not foo()
    assert foo(i64(5)) == i64(10)
    assert foo(i32(5)) == i32(20)
    assert foo("v: ", False) == "v: False"
    assert foo(True, False) == "True False"
    f = Foo()
    assert foo(f) is f
    assert foo(f).bar() == "hello"

func bar(a: string) -> string:
    return a

func bar(a: i64 = 5) -> i64:
    return a

func bar(b: i32, a: i32 = 1) -> i32:
    return b + a

func bar(a: i64, b: bool) -> i64:
    if b:
        return a
    else:
        return 2 * a

@test
func test_overload_with_default_values():
    assert bar() == 5
    assert bar("a") == "a"
    assert bar(5, False) == 10
    assert bar(2, 3) == 5

func fie(a: i64) -> i64:
    return a

func fie(a: i32, b: i32) -> i32:
    return a + b

@test
func test_overload_with_keyword_params():
    assert fie(a=1) == 1
    assert fie(a=1, b=2) == 3
    assert fie(b=1, a=2) == 3

func default_1(a: i32 = 3) -> i32:
    return a

func default_2(a: i32 = 3, b: i32 = 2) -> i32:
    return a + b

func default_3(a: i32, b: i32 = 2) -> i32:
    return a + b

func default_4(a: i32, b: i32 = 2) -> i32:
    return a + b

func default_5(a: [i32] = [5]) -> i32:
    return a[0]

func default_6(a: string = None) -> string:
    return a

@test
func test_default_params():
    assert default_1() == 3
    assert default_1(1) == 1
    assert default_2() == 5
    assert default_2(1) == 3
    assert default_2(1, 0) == 1
    assert default_2(b=1) == 4
    assert default_2(b=1, a=0) == 1
    assert default_2(1, b=3) == 4
    assert default_3(1) == 3
    assert default_3(1, 0) == 1
    assert default_3(1, b=0) == 1
    assert default_3(a=1, b=0) == 1
    assert default_3(b=1, a=0) == 1
    assert default_5() == 5
    assert default_5([6, 7]) == 6
    assert default_6() is None
    assert default_6("a") == "a"

func returns_with_raises_in_if() -> i64:
    if True:
        raise ValueError("hi")
    else:
        return 5

func returns_with_only_raises() -> i64:
    raise ValueError("hi")

func returns_in_try() -> i64:
    try:
        return 0
    except:
        return 1

func returns_in_finally() -> i64:
    try:
        pass
    except:
        pass
    finally:
        return 2

func returns_in_while_true() -> i64:
    while True:
        if True:
            return 2

func return_in_while_true_in_while() -> i64:
    while True:
        while True:
            break

        return 0

func return_in_while_true_match(v: i64) -> i64:
    while True:
        match v:
            case 1:
                return 0
            case 2:
                pass

class Bar:
    x: i64

func assign_to_parameters(a: string, b: bytes, c: Bar):
    a = None
    b = None
    c = None

@test
func test_assign_to_parameters():
    a = "hi"
    b = b"ho"
    c = Bar(5)

    assign_to_parameters(a, b, c)

    assert a == "hi"
    assert b == b"ho"
    assert c.x == 5
