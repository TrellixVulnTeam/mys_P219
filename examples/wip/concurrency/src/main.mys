from fiber import sleep
from fiber import Fiber
from queue import Queue
from udp import Socket as UdpSocket

class Sleeper(Fiber):

    def run(self):
        print("Sleeper run.")

        while True:
            sleep(2.0)
            print("Sleeper awake.")

class Producer(Fiber):
    queue: Queue[i64]

    def run(self):
        print("Producer run.")
        counter = 0

        while True:
            counter += 1
            self.queue.put(counter)
            sleep(3.0)

class Consumer(Fiber):
    queue: Queue[i64]

    def run(self):
        print("Consumer run.")

        while True:
            count = self.queue.get()
            print("Consumer got {count}.")

class FileReader(Fiber):

    def run(self):
        print("FileReader run.")
        print(open("README.txt", "r").read())

class UdpEchoServer(Fiber):

    def run(self):
        print("UdpReceiver run.")
        socket = UdpSocket()
        socket.bind("", 9090)

        while True:
            data, peer = socket.read_from()
            print(f"Received {data} from {peer}.")
            socket.write_to(data, peer)

# main() is executed in the main fiber.
def main():
    sleeper = Sleeper()
    queue = Queue[i64]()
    producer = Producer(queue)
    consumer = Consumer(queue)
    file_reader = FileReader()
    udp_echo_server = UdpEchoServer()

    sleeper.start()
    producer.start()
    consumer.start()
    file_reader.start()
    udp_echo_server.start()

    input("Press <ENTER> to exit.")
