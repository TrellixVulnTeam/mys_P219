from fiber import Lock
from fiber import Queue

trait Message:
    pass

class Bus:
    _subscribers: {i64: [Queue[Message]]}
    _lock: Lock

    func __init__(self):
        self._subscribers = {}
        self._lock = Lock()

    func subscribe(self, queue: Queue[Message], message_type: type):
        """Subscribe to given message.

        """

        self._lock.acquire()
        self._subscribers.get(message_type.id, [], True).append(queue)
        self._lock.release()

    func broadcast(self, message: Message):
        """Broadcast given message to all subscribers.

        """

        self._lock.acquire()

        for queue in self._subscribers.get(type(message).id, []):
            queue.put(message)

        self._lock.release()

_BUS: Bus = Bus()

func subscribe(queue: Queue[Message], message_type: type):
    """Subscribe to given message.

    """

    _BUS.subscribe(queue, message_type)

func broadcast(message: Message):
    """Broadcast given message to all subscribers.

    """

    _BUS.broadcast(message)
    
class FooMessage(Message):
    pass

class BarMessage(Message):
    pass

func main():
    q1 = Queue[Message]()
    q2 = Queue[Message]()

    subscribe(q1, FooMessage)
    subscribe(q1, BarMessage)
    subscribe(q2, BarMessage)

    broadcast(FooMessage())
    broadcast(BarMessage())

    assert q1.get() == FooMessage()
    assert q1.get() == BarMessage()
    assert q2.get() == BarMessage()
