# @cache
# def format(x: i64, y: bool) -> string:
#     print(x, y)
#
#     return f"{x} and {y}"

class _FormatCache:
    x: i64
    y: bool

_FORMAT_CACHE: {_FormatCache: string} = {}

def format(x: i64, y: bool) -> string:
    key = _FormatCache(x, y)

    try:
        result = _FORMAT_CACHE[key]
    except KeyError:
        result = format_original(x, y)
        _FORMAT_CACHE[key] = result

    return result

# With lazy default parameter this could be possible:
# def format(x: i64, y: bool) -> string:
#     return _FORMAT_CACHE.get(_FormatCache(x, y), format_original(x, y), True)

def format_original(x: i64, y: bool) -> string:
    print(x, y)

    return f"{x} and {y}"

def main():
    formatted = format(5, True)
    print("format(5, True): ", formatted)
    formatted = format(5, True)
    print("format(5, True): ", formatted)
    formatted = format(2, False)
    print("format(2, False):", formatted)
