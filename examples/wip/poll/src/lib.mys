from time import Time

IN: u32 = EPOLLIN
OUT: u32 = EPOLLOUT

trait Pollable:

    func get_fd(self) -> i32:
        return self._fd

class Poll:

    _items: {i32: Pollable}
    _epoll_fd: i32

    @raises(Error)
    func __init__(self):
        self._items = {}

        c"""
        this->_epoll_fd = epoll_create1(0);
        """

        if self._epoll_fd == -1:
            raise Error("epoll_create() failed")

    @raises(Error)
    func add(self, item: Pollable, events: u32 = poll.IN):
        """Add given poll item.

        """

        c"""
        struct epoll_event event;
        int res;

        event.events = events;
        event.data.fd = item->get_fd();

        res = epoll_ctl(this->_epoll_fd, EPOLL_CTL_ADD, item->get_fd(), &event);
        """

        if res == -1:
            raise Error("epoll_ctl() failed")

    func remove(self, item: Pollable):
        """Remove given poll item.

        """

    func modify(self, item: Pollable, events: u32 = poll.IN):
        """Modify events for given poll item.

        """

    func wait(self, timeout: Time = None) -> Pollable:
        """Wait for an event to occur within given time. Returns the poll
        item.

        """

        c"""
        struct epoll_event event;
        int res;

        res = epoll_wait(this->_epoll_fd, &event, 1, -1);

        if (res == -1) {
            throw Error();
        }

        fd = event.data.fd;
        """

        return self._items[fd]

    func wait(self, timeout: Time = None) -> (Pollable, u32):
        """Wait for an event to occur within given time. Returns both the poll
        item and the event(s) that occured.

        """

        return self._items[fd], events

class Mutex:
    pass

class Event(Pollable):

    _is_set: bool
    _fd: i32

    func __init__(self):
        self._is_set = False

        c"""
        this->fd = eventfd(0, 0);
        """

    func set(self):
        """Set the event.

        """

    func clear(self):
        """Clear the event.

        """

    func is_set(self) -> bool:
        """Returns true if the event is set, false otherwise.

        """

    func wait(self):
        """Wait for the event to be set. Returns immediately if already
        set. Automatically clears the event.

        """

@generic(T)
class Queue(Pollable):

    _items: [T]
    _mutex: Mutex
    _event: Event
    _fd: i32

    func __init__(self):
        self._items = []
        self._mutex = Mutex()
        self._event = Event()

    func put(self, item: T):
        """Put given item on the queue.

        """

        with self._mutex:
            self._items += item

        self._event.set()

    func get(self) -> T:
        """Get the oldest item.

        """

        while True:
            with self._mutex:
                if self._items.length() > 0:
                    return self._items.pop()

            self._event.wait()

class Timer(Pollable):

    _initial: Time
    _repeat: Time
    _fd: i32

    func __init__(self, inital: Time, repeat: Time):
        self._initial = inital
        self._repeat = repeat

        c"""
        int fd = timerfd_create(CLOCK_MONOTONIC, 0);

        if (fd == -1) {
            throw Error();
        }
        """

    func start(self):
        """Start the timer.

        """

        c"""
        res = timerfd_settime(this->get_fd(), 0);

        if (res == -1) {
            throw Error("");
        }
        """

    func stop(self):
        """Stop the timer.

        """

        c"""
        res = timerfd_settime(this->get_fd(), 0);

        if (res == -1) {
            throw Error("");
        }
        """

class Message:
    pass

class Bus:

    _mutex: Mutex = Mutex()
    _queues: {i64: [Queue[Message]]} = {}

    func attach(self, queue: Queue[Message], message_id: i64):
        """Attach given queue to the bus.

        """

        with self._mutex:
            if message_id not in self._queues:
                self._queues[message_id] = []

            self._queues[message_id] += queue

    func detach(self, queue: Queue[Message], message_id: i64):
        """Detach given queue from the bus.

        """

        with self._mutex:
            self._queues[message_id].remove(queue)

    func send(self, message_id: i64, message: Message):
        """Send given message on the bus. The message is put on all queues
        attached to given message id.

        """

        with self._mutex:
            for queue in self._queues[message_id]:
                queue.put(message)
