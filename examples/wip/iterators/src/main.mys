@iterator
func fibonaccis(count: i64) -> (i64, i64):
    curr = 0
    next = 1

    for i in range(count):
        yield (i, curr)
        temp = curr
        curr = next
        next += temp

class Memory:
    data: bytes

    @iterator
    func chunks(self, size: i64) -> bytes:
        for offset in range(0, data.length(), size):
            yield self.data[offset:offset + size]

    @iterator
    func __iter__(self) -> u8:
        for value in self.data:
            yield value

func main():
    for index, number in fibonaccis(10):
        print(f"fibonacci({index}): {number}")

    print()
    print("Chunks:")

    for chunk in Memory(b"123456789").chunks(4):
        print(chunk)

    print()
    print("Default iterator:")

    for byte in Memory(b"0123"):
        print(byte)

    print()
    print("Next method:")

    it = iter(Memory(b"0123"))
    print(it.next())
    print(it.next())
    print(it.next())
    print(it.next())
    print(it.next())

@iterator
func range(maximum: i64) -> i64:
    i = 0

    while i < maximum:
        yield i
        i += 1
