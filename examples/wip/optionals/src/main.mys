def foo(a: i64, b: i64? = None) -> i64?:
    # Adds `b` if it has a value, otherwise adds 0.
    a += b orelse 0

    # Optional values can be used as booleans to check if it has a
    # value, and at the same time unwrap it into another variable.
    if b as bv:
        a += bv

    # Optionals can be matched.
    match b:
        case 1:
            print("Matched one.")
        case 5:
            print("Matched five.")
        case None:
            print("Matched None.")
        case _ as bv:
            print(f"Matched {bv}.")

    # Clear any value.
    b = None

    # `None` and `b` (type i64) can be returned as optional.
    if a == 0:
        return None
    else:
        return a

def main():
    assert foo(1, None) orelse -1 == 1
    assert foo(1, 5) orelse -1 == 11
    b: i64? = 5
    assert foo(1, b) orelse -1 == 11
    assert not foo(0)
    assert foo(0) orelse -1 == -1

    for i in range(5):
        res = foo(i, 0)

        if res:
            print("res has a value")
        else:
            print("res does not have a value")
