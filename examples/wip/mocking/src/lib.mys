from .fie import fum
# Should be automatic.
from .fie import mock_fum
from .fie import mock_fum_remove
from .fie import MockCallFum
from .fie import MockReplaceFum

func foo(value: i64) -> i64:
    return 2 * fum(value)

test foo():
    # mock(fum)
    mock_fum().expect(1).returns(2)
    mock_fum().expect(4).returns(5)
    assert foo(1) == 4
    assert foo(4) == 10

    try:
        foo(10)
        assert False
    except AssertionError as error:
        assert str(error) == "AssertionError(message=\"Unexpected call.\")"

    # Should be automatic.
    mock_fum_remove()

test foo_no_mock():
    assert foo(1) == -2

test foo_many():
    # mock(fum)
    mock_fum().expect(2).returns(5).repeat()
    assert foo(2) == 10
    assert foo(2) == 10
    assert foo(2) == 10

    # Should be automatic.
    mock_fum_remove()

test foo_no_calls_allowed():
    # mock(fum)
    mock_fum().expect(2).returns(5).repeat(0)

    try:
        foo(2)
        assert False
    except AssertionError as error:
        assert str(error) == "AssertionError(message=\"No calls allowed.\")"

    # Should be automatic.
    mock_fum_remove()

# class _MyFum(mock(fum)):
class _MyFum(MockReplaceFum):
    value: i64

    func call(self, value: i64) -> i64:
        assert value == self.value

        return 2

test foo_replace():
    mock_fum().replace(_MyFum(5))
    mock_fum().replace(_MyFum(2))

    assert foo(5) == 4
    assert foo(2) == 4

    # Should be automatic.
    mock_fum_remove()
