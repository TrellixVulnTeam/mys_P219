func fum(value: i64) -> i64:
    if __MOCK_FUM is not None:
        return __MOCK_FUM.call(value)

    return -1

trait MockReplaceFum:

    func call(self, value: i64) -> i64:
        pass

class _MockCallFum:
    value: i64
    result: i64
    replacement: MockReplaceFum
    repeat: i64

    func __init__(self):
        self.value = default(i64)
        self.result = default(i64)
        self.replacement = None
        self.repeat = 1

    func call(self, value: i64) -> (i64, bool):
        was_last_call = False

        match self.repeat:
            case -1:
                pass
            case 0:
                raise AssertionError("No calls allowed.")
            case _:
                self.repeat -= 1

                if self.repeat == 0:
                    was_last_call = True

        if self.replacement is not None:
            result = self.replacement.call(value)
        else:
            assert value == self.value
            result = self.result

        return (result, was_last_call)


class MockCallFum:
    _call: _MockCallFum

    func __init__(self, call: _MockCallFum):
        self._call = call

    func returns(self, value: i64) -> MockCallFum:
        self._call.result = value

        return self

    func raises(self) -> MockCallFum:
        return self

    func repeat(self, value: i64 = -1) -> MockCallFum:
        self._call.repeat = value

        return self

class _MockFum:
    calls: [_MockCallFum]
    index: u64

    func __init__(self):
        self.calls = []
        self.index = 0

    func call(self, value: i64) -> i64:
        if self.index == len(self.calls):
            raise AssertionError("Unexpected call.")

        result, was_last_call = self.calls[self.index].call(value)

        if was_last_call:
            self.index += 1

        return result

class MockFum:
    _mock: _MockFum

    func __init__(self, mock: _MockFum):
        self._mock = mock

    func expect(self, value: i64) -> MockCallFum:
        call = _MockCallFum()
        call.value = value
        self._mock.calls.append(call)

        return MockCallFum(call)

    func replace(self, replacement: MockReplaceFum):
        call = _MockCallFum()
        call.replacement = replacement
        self._mock.calls.append(call)

__MOCK_FUM: _MockFum = None

func mock_fum() -> MockFum:
    if __MOCK_FUM is None:
        __MOCK_FUM = _MockFum()

    return MockFum(__MOCK_FUM)

func mock_fum_remove():
    __MOCK_FUM = None
