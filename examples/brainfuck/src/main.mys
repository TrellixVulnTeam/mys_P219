# Source: https://github.com/kostya/benchmarks/blob/master/brainfuck/bench.b
SOURCE_B: string = """\
>++[<+++++++++++++>-]<[[>+>+<<-]>[<+>-]++++++++\
[>++++++++<-]>.[-]<<>++++++++++[>++++++++++[>++\
++++++++[>++++++++++[>++++++++++[>++++++++++[>+\
+++++++++[-]<-]<-]<-]<-]<-]<-]<-]++++++++++.\
"""

class StringReader:
    data: string
    _pos: u64

    def get(self) -> char:
        if self._pos == len(self.data):
            return ''

        ch = self.data[self._pos]
        self._pos += 1

        return ch

class Tape:
    tape: [i32]
    pos: u64

    def __init__(self):
        self.tape = [0]

    def get(self) -> i32:
        return self.tape[self.pos]

    def inc(self, value: i32):
        self.tape[self.pos] += value

    def move(self, value: i32):
        self.pos += u64(value)

        while self.pos >= len(self.tape):
            self.tape.append(0)

@trait
class Op:

    def execute(self, tape: Tape):
        pass

class Inc(Op):
    val: i32

    def execute(self, tape: Tape):
        tape.inc(self.val)

class Move(Op):
    val: i32

    def execute(self, tape: Tape):
        tape.move(self.val)

class Print(Op):

    def execute(self, tape: Tape):
        print(char(tape.get()), end="", flush=True)

class Loop(Op):
    ops: [Op]

    def execute(self, tape: Tape):
        while tape.get() > 0:
            run(self.ops, tape)

def parse(source: StringReader) -> [Op]:
    ops: [Op] = []

    while True:
        match source.get():
            case '+':
                ops.append(Inc(1))
            case '-':
                ops.append(Inc(-1))
            case '>':
                ops.append(Move(1))
            case '<':
                ops.append(Move(-1))
            case '.':
                ops.append(Print())
            case '[':
                ops.append(Loop(parse(source)))
            case ']':
                break
            case '':
                break

    return ops

def run(ops: [Op], tape: Tape):
    for op in ops:
        op.execute(tape)

def main():
    ops = parse(StringReader(SOURCE_B))
    run(ops, Tape())
