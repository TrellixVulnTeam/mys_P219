name: Test

on:
  push:
  pull_request:
  schedule:
    - cron:  '15 4 * * *'
  workflow_dispatch:

jobs:
  macos:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        brew install autoconf automake libtool
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint
    - name: Build C extension
      run: |
        make c-extension -j 4
    - name: Test
      run: |
        make test-parallel -j 4

  cygwin:

    runs-on: windows-latest
    if: ${{github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags')}}

    steps:
    - uses: actions/checkout@v1
    - name: Test
      run: |
        ./.github/workflows/cygwin.bat

  linux:

    runs-on: ubuntu-20.04
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8, 3.9]

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint
    - name: Build C extension
      run: |
        make c-extension -j 4
    - name: Test
      run: |
        echo CPUS: $(nproc)
        make test-parallel -j 4
        env MYS="PYTHONPATH=$(readlink -f .) python -m mys" python -m unittest -k jobserver
    - name: Examples
      if: ${{github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags')}}
      run: |
        make -C examples -j 4

  linux-install-and-ccache:

    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.9
      uses: actions/setup-python@v1
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        sudo apt-get install -qq ccache -y
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint
    - name: Install
      run: |
        make test-install

  lint:

    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.9
      uses: actions/setup-python@v1
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint
    - name: Lint
      run: |
        make lint

  style:

    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.9
      uses: actions/setup-python@v1
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Style
      run: |
        make style
        git diff --quiet

  docs:

    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.9
      uses: actions/setup-python@v1
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Build C extension
      run: |
        make c-extension -j 4
    - name: Build documentation
      run: |
        make docs

  release:
    needs: [macos, linux, linux-install-and-ccache, cygwin, lint, style, docs]
    runs-on: ubuntu-20.04
    if: startsWith(github.ref, 'refs/tags')

    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install pypa/build
      run: |
        python -m pip install build --user
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Build a binary wheel and a source tarball
      run: |
        git clean -dfx
        python -m build --sdist --outdir dist/ .
    - name: Publish distribution ðŸ“¦ to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        skip_existing: true
        password: ${{secrets.pypi_password}}
    - name: Publish release to mys-lang.org
      run: |
        git clean -dfx
        make publish PUBLISH_TOKEN=${{secrets.publish_token}}
